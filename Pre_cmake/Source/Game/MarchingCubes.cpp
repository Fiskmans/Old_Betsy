#include "pch.h"
#include "MarchingCubes.h"


namespace math
{
	namespace marching_cubes_lut
	{

		// Vertex indexes
		//               64_______________128      
		//              /|               /|         
		//             / |              / |         
		//            /  |             /  |         
		//          16_______________32   |         
		//          |    |           |    |         
		//          |    |           |    |         
		//          |    |           |    |         
		//          |    4___________|____8         
		//          |   /            |   /          
		//          y  /             |  /           
		//          | z              | /            
		//          1/__x____________2/             
		//                

		// Edge indexes
		//                ________6_______         
		//              /|               /|         
		//             5 |              7 |         
		//            /  |             /  |         
		//           /_______4________/   11        
		//          |    10          |    |         
		//          |    |           |    |         
		//          8    |           9    |         
		//          |    |______2____|____|         
		//          |   /            |   /          
		//          y  1             |  3           
		//          | z              | /            
		//          |/__x____0_______|/         

		const unsigned char globalTriCountLUT[256] =
		{

			/*		0  1  2  3   4  5  6  7   8  9 10 11  12 13 14 15*/
			/*0  */	0, 1, 1, 2,  1, 2, 2, 3,  1, 2, 2, 3,  2, 3, 3, 2,
			/*16 */	1, 2, 2, 3,  2, 3, 3, 4,  2, 3, 3, 4,  3, 4, 4, 3,
			/*32 */	1, 2, 2, 3,  2, 3, 3, 4,  2, 3, 3, 4,  3, 4, 4, 3,
			/*48 */	2, 3, 3, 2,  3, 4, 4, 3,  3, 4, 4, 3,  4, 3, 3, 2,

			/*64 */	1, 2, 2, 3,  2, 3, 3, 4,  2, 3, 3, 4,  3, 4, 4, 3,
			/*80 */	2, 3, 3, 4,  3, 2, 4, 3,  3, 4, 4, 3,  4, 3, 3, 2,
			/*96 */	2, 3, 3, 4,  3, 4, 4, 3,  3, 4, 4, 5,  4, 3, 3, 2,
			/*112*/	3, 4, 4, 3,  4, 3, 3, 2,  4, 3, 3, 2,  3, 2, 2, 1,

			/*128*/	1, 2, 2, 3,  2, 3, 3, 4,  2, 3, 3, 4,  3, 4, 4, 3,
			/*144*/	2, 3, 3, 4,  3, 4, 4, 3,  3, 4, 4, 3,  4, 3, 3, 2,
			/*160*/	2, 3, 3, 4,  3, 4, 4, 3,  3, 4, 2, 3,  4, 3, 3, 2,
			/*176*/	3, 4, 4, 3,  4, 3, 5, 2,  4, 3, 3, 2,  3, 2, 2, 1,

			/*192*/	2, 3, 3, 4,  3, 4, 4, 3,  3, 4, 4, 3,  2, 3, 3, 2,
			/*208*/	3, 4, 4, 3,  4, 3, 3, 2,  4, 3, 3, 2,  3, 2, 2, 1,
			/*224*/	3, 4, 4, 3,  4, 3, 3, 2,  4, 7, 3, 2,  3, 2, 2, 1,
			/*240*/	2, 3, 3, 3,  3, 2, 2, 1,  3, 2, 2, 1,  2, 1, 1, 0
		};

		const Tri globalTriLUT[256][5] =
		{
			// clang-format off
			/* binary  dec*/
			/*________   0*/{ { 0,  0,  0}, { 0,  0,  0}, { 0,  0,  0}, { 0,  0,  0}, { 0,  0,  0} },
			/*_______1   1*/{ { 0,  8,  3}, { 0,  0,  0}, { 0,  0,  0}, { 0,  0,  0}, { 0,  0,  0} },
			/*______1_   2*/{ { 0,  1,  9}, { 0,  0,  0}, { 0,  0,  0}, { 0,  0,  0}, { 0,  0,  0} },
			/*______11   3*/{ { 1,  8,  3}, { 9,  8,  1}, { 0,  0,  0}, { 0,  0,  0}, { 0,  0,  0} },
			/*_____1__   4*/{ { 2,  3, 10}, { 0,  0,  0}, { 0,  0,  0}, { 0,  0,  0}, { 0,  0,  0} },
			/*_____1_1   5*/{ { 0,  8,  2}, { 2,  8, 10}, { 0,  0,  0}, { 0,  0,  0}, { 0,  0,  0} },
			/*_____11_   6*/{ { 2,  3, 10}, { 0,  1,  9}, { 0,  0,  0}, { 0,  0,  0}, { 0,  0,  0} },
			/*_____111   7*/{ { 9,  2,  1}, {10,  2,  9}, {10,  9,  8}, { 0,  0,  0}, { 0,  0,  0} },
			/*____1___   8*/{ { 2, 11,  1}, { 0,  0,  0}, { 0,  0,  0}, { 0,  0,  0}, { 0,  0,  0} },
			/*____1__1   9*/{ { 2, 11,  1}, { 3,  0,  8}, { 0,  0,  0}, { 0,  0,  0}, { 0,  0,  0} },
			/*____1_1_  10*/{ { 2,  9,  0}, { 9,  2, 11}, { 0,  0,  0}, { 0,  0,  0}, { 0,  0,  0} },
			/*____1_11  11*/{ { 2, 11,  8}, { 8,  3,  2}, { 9,  8, 11}, { 0,  0,  0}, { 0,  0,  0} },
			/*____11__  12*/{ { 3, 10,  1}, {10, 11,  1}, { 0,  0,  0}, { 0,  0,  0}, { 0,  0,  0} },
			/*____11_1  13*/{ { 0, 11,  1}, { 0,  8, 11}, { 8, 10, 11}, { 0,  0,  0}, { 0,  0,  0} },
			/*____111_  14*/{ { 3,  9,  0}, { 9,  3, 10}, {10, 11,  9}, { 0,  0,  0}, { 0,  0,  0} },
			/*____1111  15*/{ { 9,  8, 11}, {11,  8, 10}, { 0,  0,  0}, { 0,  0,  0}, { 0,  0,  0} },
			/*___1____  16*/{ { 4,  7,  8}, { 0,  0,  0}, { 0,  0,  0}, { 0,  0,  0}, { 0,  0,  0} },
			/*___1___1  17*/{ { 4,  3,  0}, { 7,  3,  4}, { 0,  0,  0}, { 0,  0,  0}, { 0,  0,  0} },
			/*___1__1_  18*/{ { 0,  1,  9}, { 8,  4,  7}, { 0,  0,  0}, { 0,  0,  0}, { 0,  0,  0} },
			/*___1__11  19*/{ { 4,  1,  9}, { 4,  3,  1}, { 7,  3,  4}, { 0,  0,  0}, { 0,  0,  0} },
			/*___1_1__  20*/{ { 2,  3, 10}, { 8,  4,  7}, { 0,  0,  0}, { 0,  0,  0}, { 0,  0,  0} },
			/*___1_1_1  21*/{ { 2,  4,  7}, { 2,  0,  4}, { 2,  7, 10}, { 0,  0,  0}, { 0,  0,  0} },
			/*___1_11_  22*/{ { 2,  3, 10}, { 9,  0,  1}, { 8,  4,  7}, { 0,  0,  0}, { 0,  0,  0} },
			/*___1_111  23*/{ { 9, 10,  2}, { 4,  7, 10}, { 1,  9,  2}, {10,  9,  4}, { 0,  0,  0} },
			/*___11___  24*/{ { 8,  4,  7}, { 2, 11,  1}, { 0,  0,  0}, { 0,  0,  0}, { 0,  0,  0} },
			/*___11__1  25*/{ { 4,  3,  0}, { 7,  3,  4}, { 2, 11,  1}, { 0,  0,  0}, { 0,  0,  0} },
			/*___11_1_  26*/{ { 2,  9,  0}, { 9,  2, 11}, { 4,  7,  8}, { 0,  0,  0}, { 0,  0,  0} },
			/*___11_11  27*/{ { 3,  2,  9}, { 9,  4,  7}, { 2, 11,  9}, { 3,  9,  7}, { 0,  0,  0} },
			/*___111__  28*/{ { 3, 10,  1}, { 1, 10, 11}, { 4,  7,  8}, { 0,  0,  0}, { 0,  0,  0} },
			/*___111_1  29*/{ { 7, 10, 11}, { 4,  7, 11}, {11,  0,  4}, { 0, 11,  1}, { 0,  0,  0} },
			/*___1111_  30*/{ { 8,  4,  7}, { 9,  0, 10}, { 9, 10, 11}, {10,  0,  3}, { 0,  0,  0} },
			/*___11111  31*/{ {10,  4,  7}, { 4, 10,  9}, { 9, 10, 11}, { 0,  0,  0}, { 0,  0,  0} },
			/*__1_____  32*/{ { 9,  5,  4}, { 0,  0,  0}, { 0,  0,  0}, { 0,  0,  0}, { 0,  0,  0} },
			/*__1____1  33*/{ { 9,  5,  4}, { 0,  8,  3}, { 0,  0,  0}, { 0,  0,  0}, { 0,  0,  0} },
			/*__1___1_  34*/{ { 0,  1,  4}, { 1,  5,  4}, { 0,  0,  0}, { 0,  0,  0}, { 0,  0,  0} },
			/*__1___11  35*/{ { 3,  5,  8}, { 5,  4,  8}, { 1,  5,  3}, { 0,  0,  0}, { 0,  0,  0} },
			/*__1__1__  36*/{ { 2,  3, 10}, { 9,  5,  4}, { 0,  0,  0}, { 0,  0,  0}, { 0,  0,  0} },
			/*__1__1_1  37*/{ { 2,  0,  8}, {10,  2,  8}, { 4,  9,  5}, { 0,  0,  0}, { 0,  0,  0} },
			/*__1__11_  38*/{ { 4,  0,  5}, {10,  2,  3}, { 0,  1,  5}, { 0,  0,  0}, { 0,  0,  0} },
			/*__1__111  39*/{ { 2,  8, 10}, { 2,  1,  8}, { 5,  8,  1}, { 5,  4,  8}, { 0,  0,  0} },
			/*__1_1___  40*/{ { 4,  9,  5}, { 1,  2, 11}, { 0,  0,  0}, { 0,  0,  0}, { 0,  0,  0} },
			/*__1_1__1  41*/{ { 2, 11,  1}, { 0,  8,  3}, { 4,  9,  5}, { 0,  0,  0}, { 0,  0,  0} },
			/*__1_1_1_  42*/{ { 0,  2,  4}, { 4,  2, 11}, { 5,  4, 11}, { 0,  0,  0}, { 0,  0,  0} },
			/*__1_1_11  43*/{ { 3,  2,  8}, { 5,  8, 11}, { 2, 11,  8}, { 4,  8,  5}, { 0,  0,  0} },
			/*__1_11__  44*/{ {11,  1, 10}, {10,  1,  3}, { 9,  5,  4}, { 0,  0,  0}, { 0,  0,  0} },
			/*__1_11_1  45*/{ { 4,  9,  5}, { 0,  8,  1}, { 8, 11,  1}, { 8, 10, 11}, { 0,  0,  0} },
			/*__1_111_  46*/{ { 5,  4,  0}, { 5,  0, 11}, { 3, 10, 11}, {11,  0,  3}, { 0,  0,  0} },
			/*__1_1111  47*/{ {11,  4,  8}, { 5,  4, 11}, {11,  8, 10}, { 0,  0,  0}, { 0,  0,  0} },
			/*__11____  48*/{ { 9,  7,  8}, { 5,  7,  9}, { 0,  0,  0}, { 0,  0,  0}, { 0,  0,  0} },
			/*__11___1  49*/{ { 9,  3,  0}, { 9,  5,  3}, { 5,  7,  3}, { 0,  0,  0}, { 0,  0,  0} },
			/*__11__1_  50*/{ { 0,  7,  8}, { 0,  1,  7}, { 1,  5,  7}, { 0,  0,  0}, { 0,  0,  0} },
			/*__11__11  51*/{ { 1,  5,  3}, { 3,  5,  7}, { 0,  0,  0}, { 0,  0,  0}, { 0,  0,  0} },
			/*__11_1__  52*/{ { 9,  7,  8}, { 9,  5,  7}, {10,  2,  3}, { 0,  0,  0}, { 0,  0,  0} },
			/*__11_1_1  53*/{ {10,  2,  0}, { 9,  5,  0}, { 5, 10,  0}, { 5,  7, 10}, { 0,  0,  0} },
			/*__11_11_  54*/{ { 5, 10,  2}, { 2,  1,  5}, {10,  5,  7}, { 8,  0,  3}, { 0,  0,  0} },
			/*__11_111  55*/{ { 5, 10,  2}, { 1,  5,  2}, { 5,  7, 10}, { 0,  0,  0}, { 0,  0,  0} },
			/*__111___  56*/{ { 7,  9,  5}, { 7,  8,  9}, { 2, 11,  1}, { 0,  0,  0}, { 0,  0,  0} },
			/*__111__1  57*/{ { 9,  5,  7}, { 9,  7,  3}, { 9,  3,  0}, { 2, 11,  1}, { 0,  0,  0} },
			/*__111_1_  58*/{ { 2,  8,  0}, { 5,  2, 11}, { 2,  7,  8}, { 2,  5,  7}, { 0,  0,  0} },
			/*__111_11  59*/{ {11,  3,  2}, { 7,  3,  5}, { 5,  3, 11}, { 0,  0,  0}, { 0,  0,  0} },
			/*__1111__  60*/{ { 9,  5,  8}, { 8,  5,  7}, {11,  1,  3}, {11,  3, 10}, { 0,  0,  0} },
			/*__1111_1  61*/{ {11,  5, 10}, { 1,  0,  9}, { 7, 10,  5}, { 0,  0,  0}, { 0,  0,  0} },
			/*__11111_  62*/{ {10, 11,  7}, { 8,  0,  3}, {11,  5,  7}, { 0,  0,  0}, { 0,  0,  0} },
			/*__111111  63*/{ {10, 11,  5}, { 7, 10,  5}, { 0,  0,  0}, { 0,  0,  0}, { 0,  0,  0} },
			/*_1______  64*/{ {10,  7,  6}, { 0,  0,  0}, { 0,  0,  0}, { 0,  0,  0}, { 0,  0,  0} },
			/*_1_____1  65*/{ { 0,  8,  3}, {10,  7,  6}, { 0,  0,  0}, { 0,  0,  0}, { 0,  0,  0} },
			/*_1____1_  66*/{ { 9,  0,  1}, {10,  7,  6}, { 0,  0,  0}, { 0,  0,  0}, { 0,  0,  0} },
			/*_1____11  67*/{ { 1,  8,  3}, { 9,  8,  1}, {10,  7,  6}, { 0,  0,  0}, { 0,  0,  0} },
			/*_1___1__  68*/{ { 3,  7,  6}, { 3,  6,  2}, { 0,  0,  0}, { 0,  0,  0}, { 0,  0,  0} },
			/*_1___1_1  69*/{ { 7,  6,  8}, { 2,  0,  6}, { 6,  0,  8}, { 0,  0,  0}, { 0,  0,  0} },
			/*_1___11_  70*/{ { 3,  7,  6}, { 3,  6,  2}, { 0,  1,  9}, { 0,  0,  0}, { 0,  0,  0} },
			/*_1___111  71*/{ { 1,  9,  8}, { 8,  7,  2}, { 6,  2,  7}, { 2,  1,  8}, { 0,  0,  0} },
			/*_1__1___  72*/{ { 1,  2, 11}, {10,  7,  6}, { 0,  0,  0}, { 0,  0,  0}, { 0,  0,  0} },
			/*_1__1__1  73*/{ { 8,  3,  0}, {11,  1,  2}, {10,  7,  6}, { 0,  0,  0}, { 0,  0,  0} },
			/*_1__1_1_  74*/{ { 0, 11,  9}, { 0,  2, 11}, { 6, 10,  7}, { 0,  0,  0}, { 0,  0,  0} },
			/*_1__1_11  75*/{ { 6, 10,  7}, { 2,  8,  3}, {11,  8,  2}, { 8, 11,  9}, { 0,  0,  0} },
			/*_1__11__  76*/{ { 1,  6, 11}, { 6,  1,  7}, { 3,  7,  1}, { 0,  0,  0}, { 0,  0,  0} },
			/*_1__11_1  77*/{ { 0,  8,  1}, { 1,  8, 11}, {11,  7,  6}, {11,  8,  7}, { 0,  0,  0} },
			/*_1__111_  78*/{ { 0, 11,  9}, { 0,  3, 11}, {11,  3,  6}, { 7,  6,  3}, { 0,  0,  0} },
			/*_1__1111  79*/{ { 6,  8,  7}, {11,  8,  6}, {11,  9,  8}, { 0,  0,  0}, { 0,  0,  0} },
			/*_1_1____  80*/{ { 6, 10,  4}, { 8,  4, 10}, { 0,  0,  0}, { 0,  0,  0}, { 0,  0,  0} },
			/*_1_1___1  81*/{ { 4,  6,  0}, { 0,  6,  3}, { 3,  6, 10}, { 0,  0,  0}, { 0,  0,  0} },
			/*_1_1__1_  82*/{ { 6, 10,  4}, { 8,  4, 10}, { 0,  1,  9}, { 0,  0,  0}, { 0,  0,  0} },
			/*_1_1__11  83*/{ { 4,  6, 10}, { 3,  4, 10}, { 1,  9,  3}, { 3,  9,  4}, { 0,  0,  0} },
			/*_1_1_1__  84*/{ { 6,  2,  4}, { 4,  2,  3}, { 4,  3,  8}, { 0,  0,  0}, { 0,  0,  0} },
			/*_1_1_1_1  85*/{ { 2,  0,  4}, { 6,  2,  4}, { 0,  0,  0}, { 0,  0,  0}, { 0,  0,  0} },
			/*_1_1_11_  86*/{ { 0,  3,  8}, { 2,  4,  6}, { 2,  1,  4}, { 1,  9,  4}, { 0,  0,  0} },
			/*_1_1_111  87*/{ { 6,  2,  9}, { 6,  9,  4}, { 1,  2,  9}, { 5,  9,  6}, { 2,  6,  9} },
			/*_1_11___  88*/{ { 2, 11,  1}, {10,  8,  4}, {10,  4,  6}, { 0,  0,  0}, { 0,  0,  0} },
			/*_1_11__1  89*/{ { 2, 11,  1}, { 0,  6,  3}, { 4,  6,  0}, {10,  3,  6}, { 0,  0,  0} },
			/*_1_11_1_  90*/{ { 0,  2, 10}, { 0, 10,  8}, { 9,  4,  6}, {11,  9,  6}, { 0,  0,  0} },
			/*_1_11_11  91*/{ {10,  3,  2}, {11,  9,  6}, { 9,  4,  6}, { 0,  0,  0}, { 0,  0,  0} },
			/*_1_111__  92*/{ { 6, 11,  4}, {11,  1,  4}, { 1,  8,  4}, { 3,  8,  1}, { 0,  0,  0} },
			/*_1_111_1  93*/{ { 1,  0,  4}, { 1,  4,  6}, { 1,  6, 11}, { 0,  0,  0}, { 0,  0,  0} },
			/*_1_1111_  94*/{ { 0,  3,  8}, { 4,  6,  9}, {11,  9,  6}, { 0,  0,  0}, { 0,  0,  0} },
			/*_1_11111  95*/{ { 4,  6,  9}, {11,  9,  6}, { 0,  0,  0}, { 0,  0,  0}, { 0,  0,  0} },
			/*_11_____  96*/{ { 5,  4,  9}, { 7,  6, 10}, { 0,  0,  0}, { 0,  0,  0}, { 0,  0,  0} },
			/*_11____1  97*/{ { 6, 10,  7}, { 4,  9,  5}, { 0,  8,  3}, { 0,  0,  0}, { 0,  0,  0} },
			/*_11___1_  98*/{ { 7,  6, 10}, { 1,  5,  0}, { 5,  4,  0}, { 0,  0,  0}, { 0,  0,  0} },
			/*_11___11  99*/{ { 1,  2, 11}, { 5,  6,  8}, { 5,  8,  9}, { 6,  1,  5}, { 0,  0,  0} },
			/*_11__1__ 100*/{ { 5,  4,  9}, { 2,  3,  7}, { 2,  7,  6}, { 0,  0,  0}, { 0,  0,  0} },
			/*_11__1_1 101*/{ { 2,  8,  7}, { 8,  2,  0}, { 5,  4,  9}, { 2,  7,  6}, { 0,  0,  0} },
			/*_11__11_ 102*/{ { 0,  1,  4}, { 4,  1,  5}, { 2,  3,  7}, { 6,  2,  7}, { 0,  0,  0} },
			/*_11__111 103*/{ { 2,  1,  5}, { 7,  8,  4}, { 5,  2,  6}, { 0,  0,  0}, { 0,  0,  0} },
			/*_11_1___ 104*/{ { 5,  4,  9}, {11,  1,  2}, {10,  7,  6}, { 0,  0,  0}, { 0,  0,  0} },
			/*_11_1__1 105*/{ { 5,  4,  9}, {11,  1,  2}, {10,  7,  6}, { 0,  8,  3}, { 0,  0,  0} },
			/*_11_1_1_ 106*/{ { 2,  5,  4}, { 0,  2,  4}, { 5,  2, 11}, { 7,  6, 10}, { 0,  0,  0} },
			/*_11_1_11 107*/{ {11,  4,  3}, { 3,  2, 11}, { 4,  8,  3}, { 4, 11,  5}, { 6, 10,  7} },
			/*_11_11__ 108*/{ { 9,  7,  4}, { 6, 11,  5}, { 7,  9,  1}, { 3,  7,  1}, { 0,  0,  0} },
			/*_11_11_1 109*/{ { 6, 11,  5}, { 8,  7,  4}, { 9,  1,  0}, { 0,  0,  0}, { 0,  0,  0} },
			/*_11_111_ 110*/{ { 6, 11,  5}, { 3,  7,  0}, { 0,  7,  4}, { 0,  0,  0}, { 0,  0,  0} },
			/*_11_1111 111*/{ { 7,  4,  8}, {11,  5,  6}, { 0,  0,  0}, { 0,  0,  0}, { 0,  0,  0} },
			/*_111____ 112*/{ { 5, 10,  9}, { 5,  6, 10}, { 8,  9, 10}, { 0,  0,  0}, { 0,  0,  0} },
			/*_111___1 113*/{ { 0,  9,  5}, { 6, 10,  5}, {10,  0,  5}, { 3,  0, 10}, { 0,  0,  0} },
			/*_111__1_ 114*/{ { 1,  5,  6}, {10,  1,  6}, { 1, 10,  0}, {10,  8,  0}, { 0,  0,  0} },
			/*_111__11 115*/{ { 6, 10,  1}, { 10, 3,  1}, { 1,  5,  6}, { 0,  0,  0}, { 0,  0,  0} },
			/*_111_1__ 116*/{ { 2,  3,  6}, { 3,  8,  6}, { 5,  8,  9}, { 8,  5,  6}, { 0,  0,  0} },
			/*_111_1_1 117*/{ { 2,  5,  6}, { 9,  5,  2}, { 0,  9,  2}, { 0,  0,  0}, { 0,  0,  0} },
			/*_111_11_ 118*/{ { 3,  8,  0}, { 6,  1,  5}, { 6,  2,  1}, { 0,  0,  0}, { 0,  0,  0} },
			/*_111_111 119*/{ { 5,  2,  1}, { 5,  6,  2}, { 0,  0,  0}, { 0,  0,  0}, { 0,  0,  0} },
			/*_1111___ 120*/{ { 1,  2, 11}, { 5,  6,  8}, { 5,  8,  9}, {10,  8,  6}, { 0,  0,  0} },
			/*_1111__1 121*/{ { 1,  0,  9}, { 3,  2, 10}, {11,  5,  6}, { 0,  0,  0}, { 0,  0,  0} },
			/*_1111_1_ 122*/{ { 2,  8,  0}, { 2, 10,  8}, { 6, 11,  5}, { 0,  0,  0}, { 0,  0,  0} },
			/*_1111_11 123*/{ {10,  3,  2}, {11,  5,  6}, { 0,  0,  0}, { 0,  0,  0}, { 0,  0,  0} },
			/*_11111__ 124*/{ { 6, 11,  5}, { 8,  9,  3}, { 9,  1,  3}, { 0,  0,  0}, { 0,  0,  0} },
			/*_11111_1 125*/{ { 0,  9,  1}, {11,  5,  6}, { 0,  0,  0}, { 0,  0,  0}, { 0,  0,  0} },
			/*_111111_ 126*/{ { 5,  6, 11}, { 8,  0,  3}, { 0,  0,  0}, { 0,  0,  0}, { 0,  0,  0} },
			/*_1111111 127*/{ { 6, 11,  5}, { 0,  0,  0}, { 0,  0,  0}, { 0,  0,  0}, { 0,  0,  0} },
			/*1_______ 128*/{ {11,  6,  5}, { 0,  0,  0}, { 0,  0,  0}, { 0,  0,  0}, { 0,  0,  0} },
			/*1______1 129*/{ { 6,  5, 11}, { 0,  8,  3}, { 0,  0,  0}, { 0,  0,  0}, { 0,  0,  0} },
			/*1_____1_ 130*/{ { 9,  0,  1}, { 5, 11,  6}, { 0,  0,  0}, { 0,  0,  0}, { 0,  0,  0} },
			/*1_____11 131*/{ {11,  6,  5}, { 9,  8,  3}, { 1,  9,  3}, { 0,  0,  0}, { 0,  0,  0} },
			/*1____1__ 132*/{ { 3, 10,  2}, { 5, 11,  6}, { 0,  0,  0}, { 0,  0,  0}, { 0,  0,  0} },
			/*1____1_1 133*/{ { 8,  2,  0}, {10,  2,  8}, {11,  6,  5}, { 0,  0,  0}, { 0,  0,  0} },
			/*1____11_ 134*/{ { 0,  1,  9}, { 2,  3, 10}, { 5, 11,  6}, { 0,  0,  0}, { 0,  0,  0} },
			/*1____111 135*/{ { 2,  1, 11}, { 6,  5,  8}, { 8,  5,  9}, { 8, 10,  6}, { 0,  0,  0} },
			/*1___1___ 136*/{ { 2,  5,  1}, { 6,  5,  2}, { 0,  0,  0}, { 0,  0,  0}, { 0,  0,  0} },
			/*1___1__1 137*/{ { 8,  3,  0}, { 1,  6,  5}, { 2,  6,  1}, { 0,  0,  0}, { 0,  0,  0} },
			/*1___1_1_ 138*/{ { 5,  2,  6}, { 5,  9,  2}, { 9,  0,  2}, { 0,  0,  0}, { 0,  0,  0} },
			/*1___1_11 139*/{ { 3,  2,  6}, { 8,  3,  6}, { 8,  5,  9}, { 5,  8,  6}, { 0,  0,  0} },
			/*1___11__ 140*/{ {10,  6,  1}, { 3, 10,  1}, { 5,  1,  6}, { 0,  0,  0}, { 0,  0,  0} },
			/*1___11_1 141*/{ { 5,  1,  6}, { 1, 10,  6}, {10,  1,  0}, { 8, 10,  0}, { 0,  0,  0} },
			/*1___111_ 142*/{ { 9,  0,  5}, {10,  6,  5}, { 0, 10,  5}, { 0,  3, 10}, { 0,  0,  0} },
			/*1___1111 143*/{ {10,  5,  9}, { 6,  5, 10}, { 9,  8, 10}, { 0,  0,  0}, { 0,  0,  0} },
			/*1__1____ 144*/{ { 4,  7,  8}, { 5, 11,  6}, { 0,  0,  0}, { 0,  0,  0}, { 0,  0,  0} },
			/*1__1___1 145*/{ {11,  6,  5}, { 7,  3,  0}, { 7,  0,  4}, { 0,  0,  0}, { 0,  0,  0} },
			/*1__1__1_ 146*/{ {11,  6,  5}, { 7,  8,  4}, { 1,  9,  0}, { 0,  0,  0}, { 0,  0,  0} },
			/*1__1__11 147*/{ { 7,  9,  4}, {11,  6,  5}, { 9,  7,  1}, { 7,  3,  1}, { 0,  0,  0} },
			/*1__1_1__ 148*/{ { 6,  5, 11}, { 2,  3, 10}, { 8,  4,  7}, { 0,  0,  0}, { 0,  0,  0} },
			/*1__1_1_1 149*/{ { 5,  2,  4}, { 2,  0,  4}, { 2,  5, 11}, { 6,  7, 10}, { 0,  0,  0} },
			/*1__1_11_ 150*/{ { 4,  5,  9}, { 1, 11,  2}, { 7, 10,  6}, { 8,  0,  3}, { 0,  0,  0} },
			/*1__1_111 151*/{ { 4,  5,  9}, { 1, 11,  2}, { 7, 10,  6}, { 0,  0,  0}, { 0,  0,  0} },
			/*1__11___ 152*/{ { 1,  2,  5}, { 8,  7,  4}, { 2,  5,  6}, { 0,  0,  0}, { 0,  0,  0} },
			/*1__11__1 153*/{ { 1,  0,  4}, { 1,  4,  5}, { 3,  2,  7}, { 2,  6,  7}, { 0,  0,  0} },
			/*1__11_1_ 154*/{ { 8,  2,  7}, { 2,  8,  0}, { 4,  5,  9}, { 7,  2,  6}, { 0,  0,  0} },
			/*1__11_11 155*/{ { 4,  5,  9}, { 3,  2,  7}, { 7,  2,  6}, { 0,  0,  0}, { 0,  0,  0} },
			/*1__111__ 156*/{ {10,  1,  3}, { 8,  4,  7}, { 5,  1,  6}, { 1, 10,  6}, { 0,  0,  0} },
			/*1__111_1 157*/{ { 6,  7, 10}, { 5,  1,  0}, { 4,  5,  0}, { 0,  0,  0}, { 0,  0,  0} },
			/*1__1111_ 158*/{ {10,  6,  7}, { 9,  4,  5}, { 8,  0,  3}, { 0,  0,  0}, { 0,  0,  0} },
			/*1__11111 159*/{ { 4,  5,  9}, { 6,  7, 10}, { 0,  0,  0}, { 0,  0,  0}, { 0,  0,  0} },
			/*1_1_____ 160*/{ { 6,  4,  9}, { 9, 11,  6}, { 0,  0,  0}, { 0,  0,  0}, { 0,  0,  0} },
			/*1_1____1 161*/{ { 3,  0,  8}, { 6,  4,  9}, { 9, 11,  6}, { 0,  0,  0}, { 0,  0,  0} },
			/*1_1___1_ 162*/{ { 0,  1,  4}, { 4, 11,  6}, { 4,  1, 11}, { 0,  0,  0}, { 0,  0,  0} },
			/*1_1___11 163*/{ {11,  6,  4}, { 1, 11,  4}, { 8,  1,  4}, { 8,  3,  1}, { 0,  0,  0} },
			/*1_1__1__ 164*/{ { 3, 10,  2}, { 9, 11,  6}, { 4,  9,  6}, { 0,  0,  0}, { 0,  0,  0} },
			/*1_1__1_1 165*/{ { 2,  0, 10}, {10,  0,  8}, { 4,  9,  6}, { 9, 11,  6}, { 0,  0,  0} },
			/*1_1__11_ 166*/{ {11,  2,  1}, { 6,  0,  3}, { 6,  4,  0}, { 3, 10,  6}, { 0,  0,  0} },
			/*1_1__111 167*/{ {11,  2,  1}, { 8, 10,  4}, { 4, 10,  6}, { 0,  0,  0}, { 0,  0,  0} },
			/*1_1_1___ 188*/{ { 2,  6,  9}, { 9,  6,  4}, { 2,  1,  9}, { 9,  5,  6}, { 6,  2,  9} },
			/*1_1_1__1 189*/{ { 3,  0,  8}, { 4,  2,  6}, { 1,  2,  4}, { 9,  1,  4}, { 0,  0,  0} },
			/*1_1_1_1_ 180*/{ { 0,  2,  4}, { 2,  6,  4}, { 0,  0,  0}, { 0,  0,  0}, { 0,  0,  0} },
			/*1_1_1_11 181*/{ { 2,  6,  4}, { 2,  4,  3}, { 3,  4,  8}, { 0,  0,  0}, { 0,  0,  0} },
			/*1_1_11__ 182*/{ { 6,  4, 10}, { 4,  3, 10}, { 9,  1,  3}, { 9,  3,  4}, { 0,  0,  0} },
			/*1_1_11_1 183*/{ {10,  6,  4}, { 4,  8, 10}, { 1,  0,  9}, { 0,  0,  0}, { 0,  0,  0} },
			/*1_1_111_ 184*/{ { 6,  4,  0}, { 6,  0,  3}, { 6,  3, 10}, { 0,  0,  0}, { 0,  0,  0} },
			/*1_1_1111 185*/{ {10,  6,  4}, { 4,  8, 10}, { 0,  0,  0}, { 0,  0,  0}, { 0,  0,  0} },
			/*1_11____ 176*/{ { 8,  6,  7}, { 8, 11,  6}, { 9, 11,  8}, { 0,  0,  0}, { 0,  0,  0} },
			/*1_11___1 177*/{ {11,  0,  9}, { 3,  0, 11}, { 3, 11,  6}, { 6,  7,  3}, { 0,  0,  0} },
			/*1_11__1_ 178*/{ { 8,  0,  1}, { 8,  1, 11}, { 7, 11,  6}, { 8, 11,  7}, { 0,  0,  0} },
			/*1_11__11 179*/{ { 6,  1, 11}, { 1,  6,  7}, { 7,  3,  1}, { 0,  0,  0}, { 0,  0,  0} },
			/*1_11_1__ 180*/{ {10,  6,  7}, { 8,  2,  3}, { 8, 11,  2}, {11,  8,  9}, { 0,  0,  0} },
			/*1_11_1_1 181*/{ {11,  0,  9}, { 2,  0, 11}, {10,  6,  7}, { 0,  0,  0}, { 0,  0,  0} },
			/*1_11_11_ 182*/{ { 3,  8,  0}, { 1, 11,  2}, { 7, 10,  6}, { 0,  0,  0}, { 0,  0,  0} },
			/*1_11_111 183*/{ { 2,  1, 11}, { 7, 10,  6}, { 0,  0,  0}, { 0,  0,  0}, { 0,  0,  0} },
			/*1_111___ 184*/{ { 9,  1,  8}, { 7,  8,  2}, { 2,  6,  7}, { 1,  2,  8}, { 0,  0,  0} },
			/*1_111__1 185*/{ { 7,  3,  6}, { 6,  3,  2}, { 1,  0,  9}, { 0,  0,  0}, { 0,  0,  0} },
			/*1_111_1_ 186*/{ { 6,  7,  8}, { 0,  2,  6}, { 0,  6,  8}, { 0,  0,  0}, { 0,  0,  0} },
			/*1_111_11 187*/{ { 7,  3,  6}, { 6,  3,  2}, { 0,  0,  0}, { 0,  0,  0}, { 0,  0,  0} },
			/*1_1111__ 188*/{ { 8,  1,  3}, { 8,  9,  1}, { 7, 10,  6}, { 0,  0,  0}, { 0,  0,  0} },
			/*1_1111_1 189*/{ { 0,  9,  1}, { 7, 10,  6}, { 0,  0,  0}, { 0,  0,  0}, { 0,  0,  0} },
			/*1_11111_ 190*/{ { 8,  0,  3}, { 7, 10,  6}, { 0,  0,  0}, { 0,  0,  0}, { 0,  0,  0} },
			/*1_111111 191*/{ { 7, 10,  6}, { 0,  0,  0}, { 0,  0,  0}, { 0,  0,  0}, { 0,  0,  0} },
			/*11______ 192*/{ {11, 10,  5}, {10,  7,  5}, { 0,  0,  0}, { 0,  0,  0}, { 0,  0,  0} },
			/*11_____1 193*/{ {11, 10,  7}, { 0,  8,  3}, { 5, 11,  7}, { 0,  0,  0}, { 0,  0,  0} },
			/*11____1_ 194*/{ { 5, 11, 10}, { 0,  1,  9}, {10,  7,  5}, { 0,  0,  0}, { 0,  0,  0} },
			/*11____11 195*/{ { 5,  9,  8}, { 5,  8,  7}, { 1, 11,  3}, { 3, 11, 10}, { 0,  0,  0} },
			/*11___1__ 196*/{ { 3, 11,  2}, { 3,  7,  5}, { 3,  5, 11}, { 0,  0,  0}, { 0,  0,  0} },
			/*11___1_1 197*/{ { 8,  2,  0}, { 2,  5, 11}, { 7,  2,  8}, { 5,  2,  7}, { 0,  0,  0} },
			/*11___11_ 198*/{ { 5,  9,  7}, { 7,  9,  3}, { 3,  9,  0}, {11,  2,  1}, { 0,  0,  0} },
			/*11___111 199*/{ { 9,  7,  5}, { 8,  7,  9}, {11,  2,  1}, { 0,  0,  0}, { 0,  0,  0} },
			/*11__1___ 200*/{ {10,  5,  2}, { 5,  1,  2}, { 7,  5, 10}, { 0,  0,  0}, { 0,  0,  0} },
			/*11__1__1 201*/{ {10,  5,  2}, { 1,  2,  5}, { 5, 10,  7}, { 0,  8,  3}, { 0,  0,  0} },
			/*11__1_1_ 202*/{ { 2, 10,  0}, { 5,  9,  0}, {10,  5,  0}, { 7,  5, 10}, { 0,  0,  0} },
			/*11__1_11 203*/{ { 7,  9,  8}, { 5,  9,  7}, { 2, 10,  3}, { 0,  0,  0}, { 0,  0,  0} },
			/*11__11__ 204*/{ { 5,  1,  3}, { 5,  3,  7}, { 0,  0,  0}, { 0,  0,  0}, { 0,  0,  0} },
			/*11__11_1 205*/{ { 7,  0,  8}, { 1,  0,  7}, { 5,  1,  7}, { 0,  0,  0}, { 0,  0,  0} },
			/*11__111_ 206*/{ { 3,  9,  0}, { 5,  9,  3}, { 7,  5,  3}, { 0,  0,  0}, { 0,  0,  0} },
			/*11__1111 207*/{ { 7,  9,  8}, { 7,  5,  9}, { 0,  0,  0}, { 0,  0,  0}, { 0,  0,  0} },
			/*11_1____ 208*/{ { 4, 11,  8}, { 4,  5, 11}, { 8, 11, 10}, { 0,  0,  0}, { 0,  0,  0} },
			/*11_1___1 209*/{ { 4,  5,  0}, { 0,  5, 11}, {10,  3, 11}, { 0, 11,  3}, { 0,  0,  0} },
			/*11_1__1_ 210*/{ { 9,  4,  5}, { 8,  0,  1}, {11,  8,  1}, {10,  8, 11}, { 0,  0,  0} },
			/*11_1__11 211*/{ { 1, 11, 10}, { 1, 10,  3}, { 5,  9,  4}, { 0,  0,  0}, { 0,  0,  0} },
			/*11_1_1__ 212*/{ { 2,  3,  8}, { 8,  5, 11}, {11,  2,  8}, { 8,  4,  5}, { 0,  0,  0} },
			/*11_1_1_1 213*/{ { 2,  0,  4}, { 2,  4, 11}, { 4,  5, 11}, { 0,  0,  0}, { 0,  0,  0} },
			/*11_1_11_ 214*/{ {11,  2,  1}, { 8,  0,  3}, { 9,  4,  5}, { 0,  0,  0}, { 0,  0,  0} },
			/*11_1_111 215*/{ { 9,  4,  5}, { 2,  1, 11}, { 0,  0,  0}, { 0,  0,  0}, { 0,  0,  0} },
			/*11_11___ 216*/{ { 8,  2, 10}, { 1,  2,  8}, { 8,  5,  1}, { 4,  5,  8}, { 0,  0,  0} },
			/*11_11__1 217*/{ { 0,  4,  5}, { 2, 10,  3}, { 1,  0,  5}, { 0,  0,  0}, { 0,  0,  0} },
			/*11_11_1_ 218*/{ { 0,  2,  8}, { 2, 10,  8}, { 9,  4,  5}, { 0,  0,  0}, { 0,  0,  0} },
			/*11_11_11 219*/{ { 3,  2, 10}, { 5,  9,  4}, { 0,  0,  0}, { 0,  0,  0}, { 0,  0,  0} },
			/*11_111__ 220*/{ { 5,  3,  8}, { 4,  5,  8}, { 5,  1,  3}, { 0,  0,  0}, { 0,  0,  0} },
			/*11_111_1 221*/{ { 1,  0,  4}, { 5,  1,  4}, { 0,  0,  0}, { 0,  0,  0}, { 0,  0,  0} },
			/*11_1111_ 222*/{ { 5,  9,  4}, { 8,  0,  3}, { 0,  0,  0}, { 0,  0,  0}, { 0,  0,  0} },
			/*11_11111 223*/{ { 5,  9,  4}, { 0,  0,  0}, { 0,  0,  0}, { 0,  0,  0}, { 0,  0,  0} },
			/*111_____ 224*/{ { 4, 10,  7}, {10,  4,  9}, {10,  9, 11}, { 0,  0,  0}, { 0,  0,  0} },
			/*111____1 225*/{ { 4,  8,  7}, { 0,  9, 10}, {10,  9, 11}, { 0, 10,  3}, { 0,  0,  0} },
			/*111___1_ 226*/{ {10,  7, 11}, { 7,  4, 11}, { 0, 11,  4}, {11,  0,  1}, { 0,  0,  0} },
			/*111___11 227*/{ {10,  3,  1}, {10,  1, 11}, { 7,  4,  8}, { 0,  0,  0}, { 0,  0,  0} },
			/*111__1__ 228*/{ { 2,  3,  9}, { 4,  9,  7}, {11,  2,  9}, { 9,  3,  7}, { 0,  0,  0} },
			/*111__1_1 229*/{ { 9,  2,  0}, { 2,  9, 11}, { 7,  4,  8}, { 0,  0,  0}, { 0,  0,  0} },
			/*111__11_ 230*/{ { 3,  4,  0}, { 3,  7,  4}, {11,  2,  1}, { 0,  0,  0}, { 0,  0,  0} },
			/*111__111 231*/{ { 4,  8,  7}, {11,  2,  1}, { 0,  0,  0}, { 0,  0,  0}, { 0,  0,  0} },
			/*111_1___ 232*/{ {10,  9,  2}, { 7,  4, 10}, { 9,  1,  2}, { 9, 10,  4}, { 0,  0,  0} },
			/*111_1__1 233*/{ { 3,  2, 10}, { 0,  9,  1}, { 4,  8,  7}, { 0,  0,  0}, { 0,  0,  0} },
			/*111_1_1_ 234*/{ { 4,  2,  7}, { 0,  2,  4}, { 7,  2, 10}, { 0,  0,  0}, { 0,  0,  0} },
			/*111_1_11 235*/{ { 3,  2, 10}, { 4,  8,  7}, { 0,  0,  0}, { 0,  0,  0}, { 0,  0,  0} },
			/*111_11__ 236*/{ { 1,  4,  9}, { 3,  4,  1}, { 3,  7,  4}, { 0,  0,  0}, { 0,  0,  0} },
			/*111_11_1 237*/{ { 1,  0,  9}, { 4,  8,  7}, { 0,  0,  0}, { 0,  0,  0}, { 0,  0,  0} },
			/*111_111_ 238*/{ { 3,  4,  0}, { 3,  7,  4}, { 0,  0,  0}, { 0,  0,  0}, { 0,  0,  0} },
			/*111_1111 239*/{ { 7,  4,  8}, { 0,  0,  0}, { 0,  0,  0}, { 0,  0,  0}, { 0,  0,  0} },
			/*1111____ 240*/{ { 8,  9, 11}, { 8, 11, 10}, { 0,  0,  0}, { 0,  0,  0}, { 0,  0,  0} },
			/*1111___1 241*/{ { 9,  3,  0}, { 3,  9, 10}, {11, 10,  9}, { 0,  0,  0}, { 0,  0,  0} },
			/*1111__1_ 242*/{ {11,  0,  1}, { 8,  0, 11}, {10,  8, 11}, { 0,  0,  0}, { 0,  0,  0} },
			/*1111__11 243*/{ {10,  3,  1}, {11, 10,  1}, { 0,  0,  0}, { 0,  0,  0}, { 0,  0,  0} },
			/*1111_1__ 244*/{ {11,  2,  8}, { 3,  8,  2}, { 8,  9, 11}, { 0,  0,  0}, { 0,  0,  0} },
			/*1111_1_1 245*/{ { 9,  2,  0}, { 2,  9, 11}, { 0,  0,  0}, { 0,  0,  0}, { 0,  0,  0} },
			/*1111_11_ 246*/{ {11,  2,  1}, { 0,  3,  8}, { 0,  0,  0}, { 0,  0,  0}, { 0,  0,  0} },
			/*1111_111 247*/{ {11,  2,  1}, { 0,  0,  0}, { 0,  0,  0}, { 0,  0,  0}, { 0,  0,  0} },
			/*11111___ 248*/{ { 2,  9,  1}, { 2, 10,  9}, { 9, 10,  8}, { 0,  0,  0}, { 0,  0,  0} },
			/*11111__1 249*/{ { 3,  2, 10}, { 1,  0,  9}, { 0,  0,  0}, { 0,  0,  0}, { 0,  0,  0} },
			/*11111_1_ 250*/{ { 8,  0,  2}, { 8,  2, 10}, { 0,  0,  0}, { 0,  0,  0}, { 0,  0,  0} },
			/*11111_11 251*/{ { 3,  2, 10}, { 0,  0,  0}, { 0,  0,  0}, { 0,  0,  0}, { 0,  0,  0} },
			/*111111__ 252*/{ { 8,  1,  3}, { 8,  9,  1}, { 0,  0,  0}, { 0,  0,  0}, { 0,  0,  0} },
			/*111111_1 253*/{ { 1,  0,  9}, { 0,  0,  0}, { 0,  0,  0}, { 0,  0,  0}, { 0,  0,  0} },
			/*1111111_ 254*/{ { 8,  0,  3}, { 0,  0,  0}, { 0,  0,  0}, { 0,  0,  0}, { 0,  0,  0} },
			/*11111111 255*/{ { 0,  0,  0}, { 0,  0,  0}, { 0,  0,  0}, { 0,  0,  0}, { 0,  0,  0} }
			// clang-format on
		};
	}
}


#if 0
#include "MarchingCubes.h"
#include "TextureFactory.h"
#include "AssetManager.h"
#include "Model.h"
#include "Scene.h"
#include "ShaderTypes.h"
#include "CommonUtilities/Intersection.hpp"

MarchingCubes::~MarchingCubes()
{
	SAFE_DELETE(myTexture);
}

bool MarchingCubes::Init(DirectX11Framework* aFamework)
{
	//AddRandomOrb();

	myFamework = aFamework;

	myTexture = TextureFactory::GetInstance().CreateUpdatableTexture({ myResolution, myResolution }, "Marching_squares");

	if (!myTexture)
	{
		return false;
	}

	myTextureAsset = new TextureAsset(myTexture->GetResourceView());

	Model* model = new Model();
	myModelData = new Model::ModelData();

	myModelData->myshaderTypeFlags = ShaderFlags::None;
	myModelData->myStride = sizeof(Vertex);
	myModelData->myOffset = M44f::Identity();

	myModelData->myPrimitiveTopology = D3D11_PRIMITIVE_TOPOLOGY_TRIANGLELIST;
	myModelData->myIndexBufferFormat = DXGI_FORMAT_R32_UINT;

	myModelData->myVertexShader = AssetManager::GetInstance().GetVertexShader("Model.hlsl", ShaderFlags::HasUvSets);
	myModelData->myPixelShader = AssetManager::GetInstance().GetPixelShader("PassThrough.hlsl", ShaderFlags::HasUvSets);

	myModelData->myTextures[0] = AssetHandle(myTextureAsset);

	SetupGraphicsResources();

	myModelData->myUseForwardRenderer = true;

	model->AddModelPart(myModelData);
	myModelAsset = new ModelAsset(model);
	myModelHandle = AssetHandle(myModelAsset);

	model->MarkLoaded();

	myModelInstance = myModelHandle.InstansiateModel();

	//Scene::GetInstance().AddToScene(myModelInstance);

	myLastTimeStamp = Tools::GetTotalTime();

	return true;
}

void MarchingCubes::Update()
{
	if (myTexture)
	{
		float now = Tools::GetTotalTime();
		float dt = now - myLastTimeStamp;
		myLastTimeStamp = now;

		if (myMove)
		{
			DoMovement(dt * mySpeed);
		}
		GenerateGeometryData();
		GenerateGeometry();
	}
}

void MarchingCubes::DoMovement(float aDt)
{
	for (Orb& orb : myOrbs)
	{
		orb.myPosition += orb.mySpeed * aDt;
		while (true)
		{
			if (orb.myPosition.x < 0.f)
			{
				orb.myPosition.x *= -1.f;
				orb.mySpeed.x *= -1.f;
				continue;
			}
			if (orb.myPosition.x > 1.f)
			{
				orb.myPosition.x -= 1.f;
				orb.myPosition.x *= -1.f;
				orb.myPosition.x += 1.f;
				orb.mySpeed.x *= -1.f;
				continue;
			}
			if (orb.myPosition.y < 0.f)
			{
				orb.myPosition.y *= -1.f;
				orb.mySpeed.y *= -1.f;
				continue;
			}
			if (orb.myPosition.y > 1.f)
			{
				orb.myPosition.y -= 1.f;
				orb.myPosition.y *= -1.f;
				orb.myPosition.y += 1.f;
				orb.mySpeed.y *= -1.f;
				continue;
			}
			if (orb.myPosition.z < 0.f)
			{
				orb.myPosition.z *= -1.f;
				orb.mySpeed.z *= -1.f;
				continue;
			}
			if (orb.myPosition.z > 1.f)
			{
				orb.myPosition.z -= 1.f;
				orb.myPosition.z *= -1.f;
				orb.myPosition.z += 1.f;
				orb.mySpeed.z *= -1.f;
				continue;
			}
			break;
		}
	}
}

void MarchingCubes::GenerateGeometryData()
{
	//DebugDrawer::GetInstance().SetColor(V4F(0.f, 0.2f, 0.8f, 1.f));
	//for (Orb& orb : myOrbs)
	//{
	//	DebugDrawer::GetInstance().DrawCross(orb.myPosition * mySize, 5_m);
	//}

	for (unsigned int y = 0; y < myResolution; y++)
	{
		for (unsigned int z = 0; z < myResolution; z++)
		{
			for (unsigned int x = 0; x < myResolution; x++)
			{

				V3F vec(static_cast<float>(x), static_cast<float>(z), static_cast<float>(y));
				vec /= static_cast<float>(myResolution);
				//vec -= V3F(0.5f, 0.5f, 0.5f);

				float weight = 0;
				for (Orb& orb : myOrbs)
				{
					weight += (1.f / (orb.myPosition - vec).LengthSqr()) * orb.mySize;
				}

				weight /= myTheshold;

				myRawData[y * myResolution * myResolution + z * myResolution + x] =  weight; 
			}
		}
	}

	//myTexture->GenerateAllPixels([this](unsigned int aX, unsigned int aY) -> float {
	//	if (aX == 0 || aY == 0)
	//	{
	//		return 0.f;
	//	}
	//	if (aX == myResolution-1 || aY == myResolution-1)
	//	{
	//		return 0.f;
	//	}
	//});
	//myTexture->Upload();
}

namespace marching_cubes_lut
{

	// vertex indexes
	//               64_______________128      
	//              /|               /|         
	//             / |              / |         
	//            /  |             /  |         
	//          16_______________32   |         
	//          |    |           |    |         
	//          |    |           |    |         
	//          |    |           |    |         
	//          |    4___________|____8         
	//          |   /            |   /          
	//          y  /             |  /           
	//          | z              | /            
	//          1/__x____________2/             
	//                

	const unsigned char triCountMapping[256] =
	{

		/*		0  1  2  3   4  5  6  7   8  9 10 11  12 13 14 15*/
		/*0*/	0, 1, 1, 2,  1, 2, 2, 3,  1, 2, 2, 3,  2, 3, 3, 2,
		/*16*/	1, 2, 2, 3,  2, 3, 3, 4,  2, 3, 3, 4,  3, 4, 4, 3,
		/*32*/	1, 2, 2, 3,  2, 3, 3, 4,  2, 3, 3, 4,  3, 4, 4, 3,
		/*48*/	2, 3, 3, 2,  3, 4, 4, 3,  3, 4, 4, 3,  4, 3, 3, 2,

		/*64*/	1, 2, 2, 3,  2, 3, 3, 4,  2, 3, 3, 4,  3, 4, 4, 3,
		/*80*/	2, 3, 3, 4,  3, 2, 4, 3,  3, 4, 4, 3,  4, 3, 3, 2,
		/*96*/	2, 3, 3, 4,  3, 4, 4, 3,  3, 4, 4, 5,  4, 3, 3, 2,
		/*112*/	3, 4, 4, 3,  4, 3, 3, 2,  4, 3, 3, 2,  3, 2, 2, 1,

		/*128*/	1, 2, 2, 3,  2, 3, 3, 4,  2, 3, 3, 4,  3, 4, 4, 3,
		/*144*/	2, 3, 3, 4,  3, 4, 4, 3,  3, 4, 4, 3,  4, 3, 3, 2,
		/*160*/	2, 3, 3, 4,  3, 4, 4, 3,  3, 4, 2, 3,  4, 3, 3, 2,
		/*176*/	3, 4, 4, 3,  4, 3, 5, 2,  4, 3, 3, 2,  3, 2, 2, 1,

		/*192*/	2, 3, 3, 4,  3, 4, 4, 3,  3, 4, 4, 3,  2, 3, 3, 2,
		/*208*/	3, 4, 4, 3,  4, 3, 3, 2,  4, 3, 3, 2,  3, 2, 2, 1,
		/*224*/	3, 4, 4, 3,  4, 3, 3, 2,  4, 7, 3, 2,  3, 2, 2, 1,
		/*240*/	2, 3, 3, 3,  3, 2, 2, 1,  3, 2, 2, 1,  2, 1, 1, 0

		/*POPCNT   1  1  2   1  2  2  3   1  2  2  3   2  3  3  4*/
	};

	struct Tri
	{
		int myIndex1;
		int myIndex2;
		int myIndex3;
	};

	// edge indexes
	//                ________6_______         
	//              /|               /|         
	//             5 |              7 |         
	//            /  |             /  |         
	//           /_______4________/   11        
	//          |    10          |    |         
	//          |    |           |    |         
	//          8    |           9    |         
	//          |    |______2____|____|         
	//          |   /            |   /          
	//          y  1             |  3           
	//          | z              | /            
	//          |/__x____0_______|/         

	Tri triTable[256][5] =
		{ 
			/*________   0*/{ { 0,  0,  0}, { 0,  0,  0}, { 0,  0,  0}, { 0,  0,  0}, { 0,  0,  0} },
			/*_______1   1*/{ { 0,  8,  3}, { 0,  0,  0}, { 0,  0,  0}, { 0,  0,  0}, { 0,  0,  0} },
			/*______1_   2*/{ { 0,  1,  9}, { 0,  0,  0}, { 0,  0,  0}, { 0,  0,  0}, { 0,  0,  0} },
			/*______11   3*/{ { 1,  8,  3}, { 9,  8,  1}, { 0,  0,  0}, { 0,  0,  0}, { 0,  0,  0} },
			/*_____1__   4*/{ { 2,  3, 10}, { 0,  0,  0}, { 0,  0,  0}, { 0,  0,  0}, { 0,  0,  0} },
			/*_____1_1   5*/{ { 0,  8,  2}, { 2,  8, 10}, { 0,  0,  0}, { 0,  0,  0}, { 0,  0,  0} },
			/*_____11_   6*/{ { 2,  3, 10}, { 0,  1,  9}, { 0,  0,  0}, { 0,  0,  0}, { 0,  0,  0} },
			/*_____111   7*/{ { 9,  2,  1}, {10,  2,  9}, {10,  9,  8}, { 0,  0,  0}, { 0,  0,  0} },
			/*____1___   8*/{ { 2, 11,  1}, { 0,  0,  0}, { 0,  0,  0}, { 0,  0,  0}, { 0,  0,  0} },
			/*____1__1   9*/{ { 2, 11,  1}, { 3,  0,  8}, { 0,  0,  0}, { 0,  0,  0}, { 0,  0,  0} },
			/*____1_1_  10*/{ { 2,  9,  0}, { 9,  2, 11}, { 0,  0,  0}, { 0,  0,  0}, { 0,  0,  0} },
			/*____1_11  11*/{ { 2, 11,  8}, { 8,  3,  2}, { 9,  8, 11}, { 0,  0,  0}, { 0,  0,  0} },
			/*____11__  12*/{ { 3, 10,  1}, {10, 11,  1}, { 0,  0,  0}, { 0,  0,  0}, { 0,  0,  0} },
			/*____11_1  13*/{ { 0, 11,  1}, { 0,  8, 11}, { 8, 10, 11}, { 0,  0,  0}, { 0,  0,  0} },
			/*____111_  14*/{ { 3,  9,  0}, { 9,  3, 10}, {10, 11,  9}, { 0,  0,  0}, { 0,  0,  0} },
			/*____1111  15*/{ { 9,  8, 11}, {11,  8, 10}, { 0,  0,  0}, { 0,  0,  0}, { 0,  0,  0} },
			/*___1____  16*/{ { 4,  7,  8}, { 0,  0,  0}, { 0,  0,  0}, { 0,  0,  0}, { 0,  0,  0} },
			/*___1___1  17*/{ { 4,  3,  0}, { 7,  3,  4}, { 0,  0,  0}, { 0,  0,  0}, { 0,  0,  0} },
			/*___1__1_  18*/{ { 0,  1,  9}, { 8,  4,  7}, { 0,  0,  0}, { 0,  0,  0}, { 0,  0,  0} },
			/*___1__11  19*/{ { 4,  1,  9}, { 4,  3,  1}, { 7,  3,  4}, { 0,  0,  0}, { 0,  0,  0} },
			/*___1_1__  20*/{ { 2,  3, 10}, { 8,  4,  7}, { 0,  0,  0}, { 0,  0,  0}, { 0,  0,  0} },
			/*___1_1_1  21*/{ { 2,  4,  7}, { 2,  0,  4}, { 2,  7, 10}, { 0,  0,  0}, { 0,  0,  0} },
			/*___1_11_  22*/{ { 2,  3, 10}, { 9,  0,  1}, { 8,  4,  7}, { 0,  0,  0}, { 0,  0,  0} },
			/*___1_111  23*/{ { 9, 10,  2}, { 4,  7, 10}, { 1,  9,  2}, {10,  9,  4}, { 0,  0,  0} },
			/*___11___  24*/{ { 8,  4,  7}, { 2, 11,  1}, { 0,  0,  0}, { 0,  0,  0}, { 0,  0,  0} },
			/*___11__1  25*/{ { 4,  3,  0}, { 7,  3,  4}, { 2, 11,  1}, { 0,  0,  0}, { 0,  0,  0} },
			/*___11_1_  26*/{ { 2,  9,  0}, { 9,  2, 11}, { 4,  7,  8}, { 0,  0,  0}, { 0,  0,  0} },
			/*___11_11  27*/{ { 3,  2,  9}, { 9,  4,  7}, { 2, 11,  9}, { 3,  9,  7}, { 0,  0,  0} },
			/*___111__  28*/{ { 3, 10,  1}, { 1, 10, 11}, { 4,  7,  8}, { 0,  0,  0}, { 0,  0,  0} },
			/*___111_1  29*/{ { 7, 10, 11}, { 4,  7, 11}, {11,  0,  4}, { 0, 11,  1}, { 0,  0,  0} },
			/*___1111_  30*/{ { 8,  4,  7}, { 9,  0, 10}, { 9, 10, 11}, {10,  0,  3}, { 0,  0,  0} },
			/*___11111  31*/{{10, 4, 7}, {4, 10, 9}, {9, 10, 11},  { 0,  0,  0}, { 0,  0,  0} },
			/*__1_____  32*/{{9, 5, 4},  { 0,  0,  0}, { 0,  0,  0}, { 0,  0,  0}, { 0,  0,  0} },
			/*__1____1  33*/{{9, 5, 4}, {0, 8, 3}, { 0,  0,  0}, { 0,  0,  0}, { 0,  0,  0} },
			/*__1___1_  34*/{{0, 1, 4}, {1, 5, 4},  { 0,  0,  0}, { 0,  0,  0}, { 0,  0,  0} },
			/*__1___11  35*/{{3, 5, 8}, {5, 4, 8}, {1, 5, 3},  { 0,  0,  0}, { 0,  0,  0} },
			/*__1__1__  36*/{{2, 3, 10}, {9, 5, 4}, { 0,  0,  0}, { 0,  0,  0}, { 0,  0,  0} },
			/*__1__1_1  37*/{{2, 0, 8}, {10, 2, 8}, {4, 9, 5},  { 0,  0,  0}, { 0,  0,  0} },
			/*__1__11_  38*/{{4, 0, 5}, {10, 2, 3}, {0, 1, 5},  { 0,  0,  0}, { 0,  0,  0} },
			/*__1__111  39*/{{2, 8, 10}, {2, 1, 8}, {5, 8, 1}, {5, 4, 8}, { 0,  0,  0} },
			/*__1_1___  40*/{{4, 9, 5}, {1, 2, 11}, { 0,  0,  0}, { 0,  0,  0}, { 0,  0,  0} },
			/*__1_1__1  41*/{{2, 11, 1}, {0, 8, 3}, {4, 9, 5}, { 0,  0,  0}, { 0,  0,  0} },
			/*__1_1_1_  42*/{{0, 2, 4}, {4, 2, 11}, {5, 4, 11}, { 0,  0,  0}, { 0,  0,  0} },
			/*__1_1_11  43*/{{3, 2, 8}, {5, 8, 11}, {2, 11, 8}, {4, 8, 5}, { 0,  0,  0} },
			/*__1_11__  44*/{{11, 1, 10}, {10, 1, 3}, {9, 5, 4}, { 0,  0,  0}, { 0,  0,  0} },
			/*__1_11_1  45*/{{4, 9, 5}, {0, 8, 1}, {8, 11, 1}, {8, 10, 11},  { 0,  0,  0} },
			/*__1_111_  46*/{{5, 4, 0}, {5, 0, 11}, {3, 10, 11}, {11, 0, 3}, { 0,  0,  0} },
			/*__1_1111  47*/{{11, 4, 8}, {5, 4, 11}, {11, 8, 10}, { 0,  0,  0}, { 0,  0,  0} },
			/*__11____  48*/{{9, 7, 8}, {5, 7, 9}, { 0,  0,  0}, { 0,  0,  0}, { 0,  0,  0} },
			/*__11___1  49*/{{9, 3, 0}, {9, 5, 3}, {5, 7, 3}, { 0,  0,  0}, { 0,  0,  0} },
			/*__11__1_  50*/{{0, 7, 8}, {0, 1, 7}, {1, 5, 7}, { 0,  0,  0}, { 0,  0,  0} },
			/*__11__11  51*/{{1, 5, 3}, {3, 5, 7}, { 0,  0,  0}, { 0,  0,  0}, { 0,  0,  0} },
			/*__11_1__  52*/{{9, 7, 8}, {9, 5, 7}, {10, 2, 3}, { 0,  0,  0}, { 0,  0,  0} },
			/*__11_1_1  53*/{{10, 2, 0}, {9, 5, 0}, {5, 10, 0}, {5, 7, 10}, { 0,  0,  0} },
			/*__11_11_  54*/{{5, 10, 2}, {2, 1, 5}, {10, 5, 7}, {8, 0, 3}, { 0,  0,  0} },
			/*__11_111  55*/{{5, 10, 2}, {1, 5, 2}, {5, 7, 10}, { 0,  0,  0}, { 0,  0,  0} },
			/*__111___  56*/{{7, 9, 5}, {7, 8, 9}, {2, 11, 1},{ 0,  0,  0}, { 0,  0,  0} },
			/*__111__1  57*/{{9, 5, 7}, {9, 7, 3}, {9, 3, 0}, {2, 11, 1}, { 0,  0,  0} },
			/*__111_1_  58*/{{2, 8, 0}, {5, 2, 11}, {2, 7, 8}, {2, 5, 7}, { 0,  0,  0} },
			/*__111_11  59*/{{11, 3, 2}, {7, 3, 5}, {5, 3, 11}, { 0,  0,  0}, { 0,  0,  0} },
			/*__1111__  60*/{{9, 5, 8}, {8, 5, 7}, {11, 1, 3}, {11, 3, 10}, { 0,  0,  0} },
			/*__1111_1  61*/{{11, 5, 10}, {1, 0, 9}, {7, 10, 5}, { 0,  0, 0}, {0, 0,  0} },
			/*__11111_  62*/{{10, 11, 7}, {8, 0, 3}, {11, 5, 7}, { 0,  0,  0}, { 0,  0,  0} },
			/*__111111  63*/{{10, 11, 5}, {7, 10, 5}, {0, 0, 0}, { 0,  0,  0}, { 0,  0,  0} },
			/*_1______  64*/{{10, 7, 6}, { 0,  0,  0}, { 0,  0,  0}, { 0,  0,  0}, { 0,  0,  0} },
			/*_1_____1  65*/{{0, 8, 3}, {10, 7, 6}, { 0,  0,  0}, { 0,  0,  0}, { 0,  0,  0} },
			/*_1____1_  66*/{{9, 0, 1}, {10, 7, 6}, { 0,  0,  0}, { 0,  0,  0}, { 0,  0,  0} },
			/*_1____11  67*/{ { 1,  8,  3}, { 9,  8,  1}, {10, 7, 6}, { 0,  0,  0}, { 0,  0,  0} },
			/*_1___1__  68*/{{3, 7, 6}, {3, 6, 2}, { 0,  0,  0}, { 0,  0,  0}, { 0,  0,  0} },
			/*_1___1_1  69*/{{7, 6, 8}, {2, 0, 6}, {6, 0, 8}, { 0,  0,  0}, { 0,  0,  0} },
			/*_1___11_  70*/{{3, 7, 6}, {3, 6, 2}, {0, 1, 9}, { 0,  0,  0}, { 0,  0,  0} },
			/*_1___111  71*/{{1, 9, 8}, {8, 7, 2}, {6, 2, 7}, {2, 1, 8}, { 0,  0,  0} },
			/*_1__1___  72*/{{1, 2, 11}, {10, 7, 6}, { 0,  0,  0}, { 0,  0,  0}, { 0,  0,  0} },
			/*_1__1__1  73*/{{8, 3, 0}, {11, 1, 2}, {10, 7, 6}, { 0,  0,  0}, { 0,  0,  0} },
			/*_1__1_1_  74*/{{0, 11, 9}, {0, 2, 11}, {6, 10, 7}, { 0,  0,  0}, { 0,  0,  0} },
			/*_1__1_11  75*/{{6, 10, 7}, {2, 8, 3}, {11, 8, 2}, {8, 11, 9}, { 0,  0,  0} },
			/*_1__11__  76*/{{1, 6, 11}, {6, 1, 7}, {3, 7, 1}, { 0,  0,  0}, { 0,  0,  0} },
			/*_1__11_1  77*/{{0, 8, 1}, {1, 8, 11}, {11, 7, 6}, {11, 8, 7}, { 0,  0,  0} },
			/*_1__111_  78*/{{0, 11, 9}, {0, 3, 11}, {11, 3, 6}, {7, 6, 3}, { 0,  0,  0} },
			/*_1__1111  79*/{{6, 8, 7}, {11, 8, 6}, {11, 9, 8}, { 0,  0,  0}, { 0,  0,  0} },
			/*_1_1____  80*/{{6, 10, 4}, {8, 4, 10}, { 0,  0,  0}, { 0,  0,  0}, { 0,  0,  0} },
			/*_1_1___1  81*/{{4, 6, 0}, {0, 6, 3}, {3, 6, 10}, { 0,  0,  0}, { 0,  0,  0} },
			/*_1_1__1_  82*/{{6, 10, 4}, {8, 4, 10}, {0, 1, 9}, { 0,  0,  0}, { 0,  0,  0} },
			/*_1_1__11  83*/{{4, 6, 10}, {3, 4, 10}, {1, 9, 3}, {3, 9, 4}, { 0,  0,  0} },
			/*_1_1_1__  84*/{{6, 2, 4}, {4, 2, 3}, {4, 3, 8}, { 0,  0,  0}, { 0,  0,  0} },
			/*_1_1_1_1  85*/{{2, 0, 4}, {6, 2, 4}, { 0,  0,  0}, { 0,  0,  0}, { 0,  0,  0} },
			/*_1_1_11_  86*/{{0, 3, 8}, {2, 4, 6}, {2, 1, 4}, {1, 9, 4}, { 0,  0,  0} },
			/*_1_1_111  87*/{{6, 2, 9}, {6, 9, 4}, {1, 2, 9}, { 5,  9,  6}, { 2,  6,  9} },
			/*_1_11___  88*/{{2, 11, 1}, {10, 8, 4}, {10, 4, 6}, { 0,  0,  0}, { 0,  0,  0} },
			/*_1_11__1  89*/{{2, 11, 1}, {0, 6, 3}, {4, 6, 0}, {10, 3, 6}, { 0,  0,  0} },
			/*_1_11_1_  90*/{{0, 2, 10}, {0, 10, 8}, {9, 4, 6}, {11, 9, 6}, { 0,  0,  0} },
			/*_1_11_11  91*/{{10, 3, 2}, {11, 9, 6}, {9, 4, 6}, { 0, 0, 0}, { 0, 0, 0} },
			/*_1_111__  92*/{{6, 11, 4}, {11, 1, 4}, {1, 8, 4}, {3, 8, 1}, { 0,  0,  0} },
			/*_1_111_1  93*/{{1, 0, 4}, {1, 4, 6}, {1, 6, 11}, { 0,  0,  0}, { 0,  0,  0} },
			/*_1_1111_  94*/{{0, 3, 8}, {4, 6, 9}, {11, 9, 6}, { 0,  0,  0} },
			/*_1_11111  95*/{{4, 6, 9}, {11, 9, 6}, { 0,  0,  0}, { 0, 0,  0}, { 0,  0,  0} },
			/*_11_____  96*/{{5, 4, 9}, {7, 6, 10}, { 0,  0,  0}, { 0,  0,  0}, { 0,  0,  0} },
			/*_11____1  97*/{{6, 10, 7}, {4, 9, 5}, {0, 8, 3}, { 0,  0,  0}, { 0,  0,  0} },
			/*_11___1_  98*/{{7, 6, 10}, {1, 5, 0}, {5, 4, 0}, { 0,  0,  0}, { 0,  0,  0} },
			/*_11___11  99*/{ {1, 2, 11}, {5, 6, 8}, {5, 8, 9}, {6, 1, 5}, { 0,  0,  0} },
			/*_11__1__ 100*/{ {5, 4, 9}, {2, 3, 7}, {2, 7, 6}, { 0,  0,  0}, { 0,  0,  0} },
			/*_11__1_1 101*/{ {2, 8, 7}, {8, 2, 0}, {5, 4, 9}, {2, 7, 6}, { 0,  0,  0} },
			/*_11__11_ 102*/{ {0, 1, 4}, {4, 1, 5}, {2, 3, 7}, {6, 2, 7}, { 0,  0,  0} },
			/*_11__111 103*/{ {2, 1, 5}, {7, 8, 4}, {5, 2, 6}, {0, 0, 0}, { 0,  0,  0} },
			/*_11_1___ 104*/{ {5, 4, 9}, {11, 1, 2}, {10, 7, 6}, {0, 0, 0}, { 0,  0,  0} },
			/*_11_1__1 105*/{ {5, 4, 9}, {11, 1, 2}, {10, 7, 6}, {0, 8, 3}, { 0,  0,  0} },
			/*_11_1_1_ 106*/{ {2, 5, 4}, {0, 2, 4}, {5, 2, 11}, {7, 6, 10}, { 0,  0,  0} },
			/*_11_1_11 107*/{ {11, 4, 3}, {3, 2, 11}, {4, 8, 3}, {4, 11, 5}, {6, 10, 7}},
			/*_11_11__ 108*/{ {9, 7, 4}, {6, 11, 5}, {7, 9, 1}, {3, 7, 1}, { 0,  0,  0} },
			/*_11_11_1 109*/{ {6, 11, 5}, {8, 7, 4}, {9, 1, 0}, { 0,  0,  0}, { 0,  0,  0} },
			/*_11_111_ 110*/{ {6, 11, 5}, {3, 7, 0}, {0, 7, 4}, { 0,  0,  0}, { 0,  0,  0} },
			/*_11_1111 111*/{ {7, 4, 8}, {11, 5, 6}, { 0,  0,  0}, { 0,  0,  0}, { 0,  0,  0} },
			/*_111____ 112*/{ {5, 10, 9}, {5, 6, 10}, {8, 9, 10}, { 0,  0,  0}, { 0,  0,  0} },
			/*_111___1 113*/{ {0, 9, 5}, {6, 10, 5}, {10, 0, 5}, {3, 0, 10}, { 0,  0,  0} },
			/*_111__1_ 114*/{ {1, 5, 6}, {10, 1, 6}, {1, 10, 0}, {10, 8, 0}, { 0,  0,  0} },
			/*_111__11 115*/{ {6, 10, 1}, {10, 3, 1}, {1, 5, 6}, { 0,  0,  0}, { 0,  0,  0} },
			/*_111_1__ 116*/{ {2, 3, 6}, {3, 8, 6}, {5, 8, 9}, {8, 5, 6}, { 0,  0,  0} },
			/*_111_1_1 117*/{ {2, 5, 6}, {9, 5, 2}, {0, 9, 2}, { 0,  0,  0}, { 0,  0,  0} },
			/*_111_11_ 118*/{ {3, 8, 0}, {6, 1, 5}, {6, 2, 1}, { 0,  0,  0}, { 0,  0,  0} },
			/*_111_111 119*/{ {5, 2, 1}, {5, 6, 2}, { 0,  0,  0}, { 0,  0,  0}, { 0,  0,  0} },
			/*_1111___ 120*/{ {1, 2, 11}, {5, 6, 8}, {5, 8, 9}, {10, 8, 6}, { 0,  0,  0} },
			/*_1111__1 121*/{ {1, 0, 9}, {3, 2, 10}, {11, 5, 6}, { 0,  0,  0}, { 0,  0,  0} },
			/*_1111_1_ 122*/{ {2, 8, 0}, {2, 10, 8}, {6, 11, 5}, { 0,  0,  0}, { 0,  0,  0} },
			/*_1111_11 123*/{ {10, 3, 2}, {11, 5, 6}, { 0,  0,  0}, { 0,  0,  0}, { 0,  0,  0} },
			/*_11111__ 124*/{ {6, 11, 5}, {8, 9, 3}, {9, 1, 3}, { 0,  0,  0}, { 0,  0,  0} },
			/*_11111_1 125*/{ {0, 9, 1}, {11, 5, 6}, { 0,  0,  0}, { 0,  0,  0}, { 0,  0,  0} },
			/*_111111_ 126*/{ {5, 6, 11}, {8, 0, 3}, { 0,  0,  0}, { 0,  0,  0}, { 0,  0,  0} },
			/*_1111111 127*/{ {6, 11, 5}, { 0,  0,  0}, { 0,  0,  0}, { 0,  0,  0}, { 0,  0,  0} },

				//////////////////////////////////////////////////////////////////////////////////////////////////////////

			/*1_______ 128*/{ {11,  6,  5}, { 0,  0,  0}, { 0,  0,  0}, { 0,  0,  0}, { 0,  0,  0} },
			/*1______1 129*/{ { 6,  5, 11}, { 0,  8,  3}, { 0,  0,  0}, { 0,  0,  0}, { 0,  0,  0} },
			/*1_____1_ 130*/{ { 9,  0,  1}, { 5, 11,  6}, { 0,  0,  0}, { 0,  0,  0}, { 0,  0,  0} },
			/*1_____11 131*/{ {11,  6,  5}, { 9,  8,  3}, { 1,  9,  3}, { 0,  0,  0}, { 0,  0,  0} },
			/*1____1__ 132*/{ { 3, 10,  2}, { 5, 11,  6}, { 0,  0,  0}, { 0,  0,  0}, { 0,  0,  0} },
			/*1____1_1 133*/{ { 8,  2,  0}, {10,  2,  8}, {11,  6,  5}, { 0,  0,  0}, { 0,  0,  0} },
			/*1____11_ 134*/{ { 0,  1,  9}, { 2,  3, 10}, { 5, 11,  6}, { 0,  0,  0}, { 0,  0,  0} },
			/*1____111 135*/{ { 2,  1, 11}, { 6,  5,  8}, { 8,  5,  9}, { 8, 10,  6}, { 0,  0,  0} },
			/*1___1___ 136*/{ { 2,  5,  1}, { 6,  5,  2}, { 0,  0,  0}, { 0,  0,  0}, { 0,  0,  0} },
			/*1___1__1 137*/{ { 8,  3,  0}, { 1,  6,  5}, { 2,  6,  1}, { 0,  0,  0}, { 0,  0,  0} },
			/*1___1_1_ 138*/{ { 5,  2,  6}, { 5,  9,  2}, { 9,  0,  2}, { 0,  0,  0}, { 0,  0,  0} },
			/*1___1_11 139*/{ { 3,  2,  6}, { 8,  3,  6}, { 8,  5,  9}, { 5,  8,  6}, { 0,  0,  0} },
			/*1___11__ 140*/{ {10,  6,  1}, { 3, 10,  1}, { 5,  1,  6}, { 0,  0,  0}, { 0,  0,  0} },
			/*1___11_1 141*/{ { 5,  1,  6}, { 1, 10,  6}, {10,  1,  0}, { 8, 10,  0}, { 0,  0,  0} },
			/*1___111_ 142*/{ { 9,  0,  5}, {10,  6,  5}, { 0, 10,  5}, { 0,  3, 10}, { 0,  0,  0} },
			/*1___1111 143*/{ {10,  5,  9}, { 6,  5, 10}, { 9,  8, 10}, { 0,  0,  0}, { 0,  0,  0} },
			/*1__1____ 144*/{ { 4,  7,  8}, { 5, 11,  6}, { 0,  0,  0}, { 0,  0,  0}, { 0,  0,  0} },
			/*1__1___1 145*/{ {11,  6,  5}, { 7,  3,  0}, { 7,  0,  4}, { 0,  0,  0}, { 0,  0,  0} },
			/*1__1__1_ 146*/{ {11,  6,  5}, { 7,  8,  4}, { 1,  9,  0}, { 0,  0,  0}, { 0,  0,  0} },
			/*1__1__11 147*/{ { 7,  9,  4}, {11,  6,  5}, { 9,  7,  1}, { 7,  3,  1}, { 0,  0,  0} },
			/*1__1_1__ 148*/{ { 6,  5, 11}, { 2,  3, 10}, { 8,  4,  7}, { 0,  0,  0}, { 0,  0,  0} },
			/*1__1_1_1 149*/{ { 5,  2,  4}, { 2,  0,  4}, { 2,  5, 11}, { 6,  7, 10}, { 0,  0,  0} },
			/*1__1_11_ 150*/{ { 4,  5,  9}, { 1, 11,  2}, { 7, 10,  6}, { 8,  0,  3}, { 0,  0,  0} },
			/*1__1_111 151*/{ { 4,  5,  9}, { 1, 11,  2}, { 7, 10,  6}, { 0,  0,  0}, { 0,  0,  0} },
			/*1__11___ 152*/{ { 1,  2,  5}, { 8,  7,  4}, { 2,  5,  6}, { 0,  0,  0}, { 0,  0,  0} },
			/*1__11__1 153*/{ { 1,  0,  4}, { 1,  4,  5}, { 3,  2,  7}, { 2,  6,  7}, { 0,  0,  0} },
			/*1__11_1_ 154*/{ { 8,  2,  7}, { 2,  8,  0}, { 4,  5,  9}, { 7,  2,  6}, { 0,  0,  0} },
			/*1__11_11 155*/{ { 4,  5,  9}, { 3,  2,  7}, { 7,  2,  6}, { 0,  0,  0}, { 0,  0,  0} },
			/*1__111__ 156*/{ {10,  1,  3}, { 8,  4,  7}, { 5,  1,  6}, { 1, 10,  6}, { 0,  0,  0} },
			/*1__111_1 157*/{ { 6,  7, 10}, { 5,  1,  0}, { 4,  5,  0}, { 0,  0,  0}, { 0,  0,  0} },
			/*1__1111_ 158*/{ {10,  6,  7}, { 9,  4,  5}, { 8,  0,  3}, { 0,  0,  0}, { 0,  0,  0} },
			/*1__11111 159*/{ { 4,  5,  9}, { 6,  7, 10}, { 0,  0,  0}, { 0,  0,  0}, { 0,  0,  0} },
			/*1_1_____ 160*/{ { 6,  4,  9}, { 9, 11,  6}, { 0,  0,  0}, { 0,  0,  0}, { 0,  0,  0} },
			/*1_1____1 161*/{ { 3,  0,  8}, { 6,  4,  9}, { 9, 11,  6}, { 0,  0,  0}, { 0,  0,  0} },
			/*1_1___1_ 162*/{ { 0,  1,  4}, { 4, 11,  6}, { 4,  1, 11}, { 0,  0,  0}, { 0,  0,  0} },
			/*1_1___11 163*/{ {11,  6,  4}, { 1, 11,  4}, { 8,  1,  4}, { 8,  3,  1}, { 0,  0,  0} },
			/*1_1__1__ 164*/{ { 3, 10,  2}, { 9, 11,  6}, { 4,  9,  6}, { 0,  0,  0}, { 0,  0,  0} },
			/*1_1__1_1 165*/{ { 2,  0, 10}, {10,  0,  8}, { 4,  9,  6}, { 9, 11,  6}, { 0,  0,  0} },
			/*1_1__11_ 166*/{ {11,  2,  1}, { 6,  0,  3}, { 6,  4,  0}, { 3, 10,  6}, { 0,  0,  0} },
			/*1_1__111 167*/{ {11,  2,  1}, { 8, 10,  4}, { 4, 10,  6}, { 0,  0,  0}, { 0,  0,  0} },
			/*1_1_1___  87*/{ { 2,  6,  9}, { 9,  6,  4}, { 2,  1,  9}, { 9,  5,  6}, { 6,  2,  9} },
			/*1_1_1__1  86*/{ { 3,  0,  8}, { 4,  2,  6}, { 1,  2,  4}, { 9,  1,  4}, { 0,  0,  0} },
			/*1_1_1_1_  85*/{ { 0,  2,  4}, { 2,  6,  4}, { 0,  0,  0}, { 0,  0,  0}, { 0,  0,  0} },
			/*1_1_1_11  84*/{ { 2,  6,  4}, { 2,  4,  3}, { 3,  4,  8}, { 0,  0,  0}, { 0,  0,  0} },
			/*1_1_11__  83*/{ { 6,  4, 10}, { 4,  3, 10}, { 9,  1,  3}, { 9,  3,  4}, { 0,  0,  0} },
			/*1_1_11_1  82*/{ {10,  6,  4}, { 4,  8, 10}, { 1,  0,  9}, { 0,  0,  0}, { 0,  0,  0} },
			/*1_1_111_  81*/{ { 6,  4,  0}, { 6,  0,  3}, { 6,  3, 10}, { 0,  0,  0}, { 0,  0,  0} },
			/*1_1_1111  80*/{ {10,  6,  4}, { 4,  8, 10}, { 0,  0,  0}, { 0,  0,  0}, { 0,  0,  0} },
			/*1_11____  79*/{ { 8,  6,  7}, { 8, 11,  6}, { 9, 11,  8}, { 0,  0,  0}, { 0,  0,  0} },
			/*1_11___1  78*/{ {11,  0,  9}, { 3,  0, 11}, { 3, 11,  6}, { 6,  7,  3}, { 0,  0,  0} },
			/*1_11__1_  77*/{ { 8,  0,  1}, { 8,  1, 11}, { 7, 11,  6}, { 8, 11,  7}, { 0,  0,  0} },
			/*1_11__11  76*/{ { 6,  1, 11}, { 1,  6,  7}, { 7,  3,  1}, { 0,  0,  0}, { 0,  0,  0} },
			/*1_11_1__  75*/{ {10,  6,  7}, { 8,  2,  3}, { 8, 11,  2}, {11,  8,  9}, { 0,  0,  0} },
			/*1_11_1_1  74*/{ {11,  0,  9}, { 2,  0, 11}, {10,  6,  7}, { 0,  0,  0}, { 0,  0,  0} },
			/*1_11_11_  73*/{ { 3,  8,  0}, { 1, 11,  2}, { 7, 10,  6}, { 0,  0,  0}, { 0,  0,  0} },
			/*1_11_111  72*/{ { 2,  1, 11}, { 7, 10,  6}, { 0,  0,  0}, { 0,  0,  0}, { 0,  0,  0} },
			/*1_111___  71*/{ { 9,  1,  8}, { 7,  8,  2}, { 2,  6,  7}, { 1,  2,  8}, { 0,  0,  0} },
			/*1_111__1  70*/{ { 7,  3,  6}, { 6,  3,  2}, { 1,  0,  9}, { 0,  0,  0}, { 0,  0,  0} },
			/*1_111_1_  69*/{ { 6,  7,  8}, { 0,  2,  6}, { 0,  6,  8}, { 0,  0,  0}, { 0,  0,  0} },
			/*1_111_11  68*/{ { 7,  3,  6}, { 6,  3,  2}, { 0,  0,  0}, { 0,  0,  0}, { 0,  0,  0} },
			/*1_1111__  67*/{ { 8,  1,  3}, { 8,  9,  1}, { 7, 10,  6}, { 0,  0,  0}, { 0,  0,  0} },
			/*1_1111_1  66*/{ { 0,  9,  1}, { 7, 10,  6}, { 0,  0,  0}, { 0,  0,  0}, { 0,  0,  0} },
			/*1_11111_  65*/{ { 8,  0,  3}, { 7, 10,  6}, { 0,  0,  0}, { 0,  0,  0}, { 0,  0,  0} },
			/*1_111111  64*/{ { 7, 10,  6}, { 0,  0,  0}, { 0,  0,  0}, { 0,  0,  0}, { 0,  0,  0} },
			/*11______  63*/{ {11, 10,  5}, {10,  7,  5}, { 0,  0,  0}, { 0,  0,  0}, { 0,  0,  0} },
			/*11_____1  62*/{ {11, 10,  7}, { 0,  8,  3}, { 5, 11,  7}, { 0,  0,  0}, { 0,  0,  0} },
			/*11____1_  61*/{ { 5, 11, 10}, { 0,  1,  9}, {10,  7,  5}, { 0,  0,  0}, { 0,  0,  0} },
			/*11____11  60*/{ { 5,  9,  8}, { 5,  8,  7}, { 1, 11,  3}, { 3, 11, 10}, { 0,  0,  0} },
			/*11___1__  59*/{ { 3, 11,  2}, { 3,  7,  5}, { 3,  5, 11}, { 0,  0,  0}, { 0,  0,  0} },
			/*11___1_1  58*/{ { 8,  2,  0}, { 2,  5, 11}, { 7,  2,  8}, { 5,  2,  7}, { 0,  0,  0} },
			/*11___11_  57*/{ { 5,  9,  7}, { 7,  9,  3}, { 3,  9,  0}, {11,  2,  1}, { 0,  0,  0} },
			/*11___111  56*/{ { 9,  7,  5}, { 8,  7,  9}, {11,  2,  1}, { 0,  0,  0}, { 0,  0,  0} },
			/*11__1___  55*/{ {10,  5,  2}, { 5,  1,  2}, { 7,  5, 10}, { 0,  0,  0}, { 0,  0,  0} },
			/*11__1__1  54*/{ {10,  5,  2}, { 1,  2,  5}, { 5, 10,  7}, { 0,  8,  3}, { 0,  0,  0} },
			/*11__1_1_  53*/{ { 2, 10,  0}, { 5,  9,  0}, {10,  5,  0}, { 7,  5, 10}, { 0,  0,  0} },
			/*11__1_11  52*/{ { 7,  9,  8}, { 5,  9,  7}, { 2, 10,  3}, { 0,  0,  0}, { 0,  0,  0} },
			/*11__11__  51*/{ { 5,  1,  3}, { 5,  3,  7}, { 0,  0,  0}, { 0,  0,  0}, { 0,  0,  0} },
			/*11__11_1  50*/{ { 7,  0,  8}, { 1,  0,  7}, { 5,  1,  7}, { 0,  0,  0}, { 0,  0,  0} },
			/*11__111_  49*/{ { 3,  9,  0}, { 5,  9,  3}, { 7,  5,  3}, { 0,  0,  0}, { 0,  0,  0} },
			/*11__1111  48*/{ { 7,  9,  8}, { 7,  5,  9}, { 0,  0,  0}, { 0,  0,  0}, { 0,  0,  0} },
			/*11_1____  47*/{ { 4, 11,  8}, { 4,  5, 11}, { 8, 11, 10}, { 0,  0,  0}, { 0,  0,  0} },
			/*11_1___1  46*/{ { 4,  5,  0}, { 0,  5, 11}, {10,  3, 11}, { 0, 11,  3}, { 0,  0,  0} },
			/*11_1__1_  45*/{ { 9,  4,  5}, { 8,  0,  1}, {11,  8,  1}, {10,  8, 11}, { 0,  0,  0} },
			/*11_1__11  44*/{ { 1, 11, 10}, { 1, 10,  3}, { 5,  9,  4}, { 0,  0,  0}, { 0,  0,  0} },
			/*11_1_1__  43*/{ { 2,  3,  8}, { 8,  5, 11}, {11,  2,  8}, { 8,  4,  5}, { 0,  0,  0} },
			/*11_1_1_1  42*/{ { 2,  0,  4}, { 2,  4, 11}, { 4,  5, 11}, { 0,  0,  0}, { 0,  0,  0} },
			/*11_1_11_  41*/{ {11,  2,  1}, { 8,  0,  3}, { 9,  4,  5}, { 0,  0,  0}, { 0,  0,  0} },
			/*11_1_111  40*/{ { 9,  4,  5}, { 2,  1, 11}, { 0,  0,  0}, { 0,  0,  0}, { 0,  0,  0} },
			/*11_11___  39*/{ { 8,  2, 10}, { 1,  2,  8}, { 8,  5,  1}, { 4,  5,  8}, { 0,  0,  0} },
			/*11_11__1  38*/{ { 0,  4,  5}, { 2, 10,  3}, { 1,  0,  5}, { 0,  0,  0}, { 0,  0,  0} },
			/*11_11_1_  37*/{ { 0,  2,  8}, { 2, 10,  8}, { 9,  4,  5}, { 0,  0,  0}, { 0,  0,  0} },
			/*11_11_11  36*/{ { 3,  2, 10}, { 5,  9,  4}, { 0,  0,  0}, { 0,  0,  0}, { 0,  0,  0} },
			/*11_111__  35*/{ { 5,  3,  8}, { 4,  5,  8}, { 5,  1,  3}, { 0,  0,  0}, { 0,  0,  0} },
			/*11_111_1  34*/{ { 1,  0,  4}, { 5,  1,  4}, { 0,  0,  0}, { 0,  0,  0}, { 0,  0,  0} },
			/*11_1111_  33*/{ { 5,  9,  4}, { 8,  0,  3}, { 0,  0,  0}, { 0,  0,  0}, { 0,  0,  0} },
			/*11_11111  32*/{ { 5,  9,  4}, { 0,  0,  0}, { 0,  0,  0}, { 0,  0,  0}, { 0,  0,  0} },
			/*111_____  31*/{ { 4, 10,  7}, {10,  4,  9}, {10,  9, 11}, { 0,  0,  0}, { 0,  0,  0} },
			/*111____1  30*/{ { 4,  8,  7}, { 0,  9, 10}, {10,  9, 11}, { 0, 10,  3}, { 0,  0,  0} },
			/*111___1_  29*/{ {10,  7, 11}, { 7,  4, 11}, { 0, 11,  4}, {11,  0,  1}, { 0,  0,  0} },
			/*111___11  28*/{ {10,  3,  1}, {10,  1, 11}, { 7,  4,  8}, { 0,  0,  0}, { 0,  0,  0} },
			/*111__1__  27*/{ { 2,  3,  9}, { 4,  9,  7}, {11,  2,  9}, { 9,  3,  7}, { 0,  0,  0} },
			/*111__1_1  26*/{ { 9,  2,  0}, { 2,  9, 11}, { 7,  4,  8}, { 0,  0,  0}, { 0,  0,  0} },
			/*111__11_  25*/{ { 3,  4,  0}, { 3,  7,  4}, {11,  2,  1}, { 0,  0,  0}, { 0,  0,  0} },
			/*111__111  24*/{ { 4,  8,  7}, {11,  2,  1}, { 0,  0,  0}, { 0,  0,  0}, { 0,  0,  0} },
			/*111_1___  23*/{ {10,  9,  2}, { 7,  4, 10}, { 9,  1,  2}, { 9, 10,  4}, { 0,  0,  0} },
			/*111_1__1  22*/{ { 3,  2, 10}, { 0,  9,  1}, { 4,  8,  7}, { 0,  0,  0}, { 0,  0,  0} },
			/*111_1_1_  21*/{ { 4,  2,  7}, { 0,  2,  4}, { 7,  2, 10}, { 0,  0,  0}, { 0,  0,  0} },
			/*111_1_11  20*/{ { 3,  2, 10}, { 4,  8,  7}, { 0,  0,  0}, { 0,  0,  0}, { 0,  0,  0} },
			/*111_11__  19*/{ { 1,  4,  9}, { 3,  4,  1}, { 3,  7,  4}, { 0,  0,  0}, { 0,  0,  0} },
			/*111_11_1  18*/{ { 1,  0,  9}, { 4,  8,  7}, { 0,  0,  0}, { 0,  0,  0}, { 0,  0,  0} },
			/*111_111_  17*/{ { 3,  4,  0}, { 3,  7,  4}, { 0,  0,  0}, { 0,  0,  0}, { 0,  0,  0} },
			/*111_1111  16*/{ { 7,  4,  8}, { 0,  0,  0}, { 0,  0,  0}, { 0,  0,  0}, { 0,  0,  0} },
			/*1111____  15*/{ { 8,  9, 11}, { 8, 11, 10}, { 0,  0,  0}, { 0,  0,  0}, { 0,  0,  0} },
			/*1111___1  14*/{ { 9,  3,  0}, { 3,  9, 10}, {11, 10,  9}, { 0,  0,  0}, { 0,  0,  0} },
			/*1111__1_  13*/{ {11,  0,  1}, { 8,  0, 11}, {10,  8, 11}, { 0,  0,  0}, { 0,  0,  0} },
			/*1111__11  12*/{ {10,  3,  1}, {11, 10,  1}, { 0,  0,  0}, { 0,  0,  0}, { 0,  0,  0} },
			/*1111_1__  11*/{ {11,  2,  8}, { 3,  8,  2}, { 8,  9, 11}, { 0,  0,  0}, { 0,  0,  0} },
			/*1111_1_1  10*/{ { 9,  2,  0}, { 2,  9, 11}, { 0,  0,  0}, { 0,  0,  0}, { 0,  0,  0} },
			/*1111_11_   9*/{ {11,  2,  1}, { 0,  3,  8}, { 0,  0,  0}, { 0,  0,  0}, { 0,  0,  0} },
			/*1111_111   8*/{ {11,  2,  1}, { 0,  0,  0}, { 0,  0,  0}, { 0,  0,  0}, { 0,  0,  0} },
			/*11111___   7*/{ { 2,  9,  1}, { 2, 10,  9}, { 9, 10,  8}, { 0,  0,  0}, { 0,  0,  0} },
			/*11111__1   6*/{ { 3,  2, 10}, { 1,  0,  9}, { 0,  0,  0}, { 0,  0,  0}, { 0,  0,  0} },
			/*11111_1_   5*/{ { 8,  0,  2}, { 8,  2, 10}, { 0,  0,  0}, { 0,  0,  0}, { 0,  0,  0} },
			/*11111_11   4*/{ { 3,  2, 10}, { 0,  0,  0}, { 0,  0,  0}, { 0,  0,  0}, { 0,  0,  0} },
			/*111111__   3*/{ { 8,  1,  3}, { 8,  9,  1}, { 0,  0,  0}, { 0,  0,  0}, { 0,  0,  0} },
			/*111111_1   2*/{ { 1,  0,  9}, { 0,  0,  0}, { 0,  0,  0}, { 0,  0,  0}, { 0,  0,  0} },
			/*1111111_   1*/{ { 8,  0,  3}, { 0,  0,  0}, { 0,  0,  0}, { 0,  0,  0}, { 0,  0,  0} },
			/*11111111   0*/{ { 0,  0,  0}, { 0,  0,  0}, { 0,  0,  0}, { 0,  0,  0}, { 0,  0,  0} },
		};

}

void MarchingCubes::GenerateGeometry()
{
	float t[2*2*2] = {0,0,0,0,0,0,0,0};
	math::MarchingCubes(t, { 1,2,4 }, { 2,2,2 }, -2.f);

	const V3F cellSize = V3F(mySize / myResolution, mySize / myResolution, mySize / myResolution);



	V4F outsideColor = V4F(0.9f, 0.f, 0.2f, 1.f);
	V4F insideColor = V4F(0.0f, 0.0f, 0.0f, 1.f);

	//DebugDrawer::GetInstance().SetColor(V4F(0.f,0.f,0.f,1.f));
	//for (unsigned int y = 0; y < myResolution; y++)
	//{
	//	for (unsigned int z = 0; z < myResolution; z++)
	//	{
	//		for (unsigned int x = 0; x < myResolution; x++)
	//		{
	//			float weight = myRawData[(x + 0) + (z * myResolution) + (y * myResolution * myResolution)];
	//			if (weight > 1.f)
	//			{
	//				V3F point = V3F(static_cast<float>(x), static_cast<float>(z), static_cast<float>(y)) * (mySize / myResolution);
	//				DebugDrawer::GetInstance().DrawCross(point, weight * 5_dm);
	//			}
	//		}
	//	}
	//}

	DebugDrawer::GetInstance().SetColor(V4F(0.6f, 0.f, 0.2f, 0.6f));

	for (unsigned int y = 0; y < myResolution - 1; y++)
	{
		for (unsigned int z = 0; z < myResolution - 1; z++)
		{
			for (unsigned int x = 0; x < myResolution - 1; x++)
			{
				float weigths[8] = {
					myRawData[(x + 0) + ((z + 0) * myResolution) + ((y + 0) * myResolution * myResolution)],
					myRawData[(x + 1) + ((z + 0) * myResolution) + ((y + 0) * myResolution * myResolution)],
					myRawData[(x + 0) + ((z + 0) * myResolution) + ((y + 1) * myResolution * myResolution)],
					myRawData[(x + 1) + ((z + 0) * myResolution) + ((y + 1) * myResolution * myResolution)],
					myRawData[(x + 0) + ((z + 1) * myResolution) + ((y + 0) * myResolution * myResolution)],
					myRawData[(x + 1) + ((z + 1) * myResolution) + ((y + 0) * myResolution * myResolution)],
					myRawData[(x + 0) + ((z + 1) * myResolution) + ((y + 1) * myResolution * myResolution)],
					myRawData[(x + 1) + ((z + 1) * myResolution) + ((y + 1) * myResolution * myResolution)]
				};
				uint32_t index = 0b00000000;
				for (size_t i = 0; i < 8; i++)
				{
					index |= ((weigths[i] > 1.f) << i);
				}

				if (index == 0b00000000 || index == 0b11111111)
				{
					continue; // surface does not go through this cell
				}

				V3F point =
					V3F(-mySize / 2.f, -mySize/2.f, -mySize / 2.f)
					+ V3F(static_cast<float>(x), static_cast<float>(z), static_cast<float>(y)) * (mySize / myResolution)
					+ cellSize / 2.f;

				// vertex indexes
				//               6________________7        
				//              /|               /|         
				//             / |              / |         
				//            /  |             /  |         
				//          4/_______________5/   |         
				//          |    |           |    |         
				//          |    |           |    |         
				//          |    |           |    |         
				//          |    2___________|____3         
				//          |   /            |   /          
				//          y  /             |  /           
				//          | z              | /            
				//          0/__x____________1/             
				//                
				// edge indexes
				//                ________6_______         
				//              /|               /|         
				//             5 |              7 |         
				//            /  |             /  |         
				//           /_______4________/   11        
				//          |    10          |    |         
				//          |    |           |    |         
				//          8    |           9    |         
				//          |    |______2____|____|         
				//          |   /            |   /          
				//          y  1             |  3           
				//          | z              | /            
				//          |/__x____0_______|/             


				V3F points[12] =
				{
					point + V3F(cellSize.x * INVERSELERP(weigths[0], weigths[1], 1.f),	0,														0),													   //+	
					point + V3F(cellSize.x,												0,														cellSize.z * INVERSELERP(weigths[1], weigths[3], 1.f)),//+
					point + V3F(cellSize.x * INVERSELERP(weigths[2], weigths[3], 1.f),	0,														cellSize.z),										   //+
					point + V3F(0,														0,														cellSize.z * INVERSELERP(weigths[0], weigths[2], 1.f)),//+
					point + V3F(cellSize.x * INVERSELERP(weigths[4], weigths[5], 1.f),	cellSize.y,												0),													   //+
					point + V3F(cellSize.x,												cellSize.y,												cellSize.z * INVERSELERP(weigths[5], weigths[7], 1.f)),//+
					point + V3F(cellSize.x * INVERSELERP(weigths[6], weigths[7], 1.f),	cellSize.y,												cellSize.z),										   //+
					point + V3F(0,														cellSize.y,												cellSize.z * INVERSELERP(weigths[4], weigths[6], 1.f)),//+
					point + V3F(0,														cellSize.y * INVERSELERP(weigths[0], weigths[4], 1.f),	0),													   //+
					point + V3F(cellSize.x,												cellSize.y * INVERSELERP(weigths[1], weigths[5], 1.f),	0),													   //+
					point + V3F(0,														cellSize.y * INVERSELERP(weigths[2], weigths[6], 1.f),	cellSize.z),										   //+
					point + V3F(cellSize.x,												cellSize.y * INVERSELERP(weigths[3], weigths[7], 1.f),	cellSize.z),										   //+
				};


				//DebugDrawer::GetInstance().SetColor(insideColor);
				//for (int i = 0; i < 12; i++)
				//{
				//	DebugDrawer::GetInstance().DrawCross(points[i], (i == myHighlighted) ? 4_dm : 2_dm);
				//}

				//DebugDrawer::GetInstance().SetColor((weigths[0] > 1.f) ? insideColor : outsideColor);
				//DebugDrawer::GetInstance().DrawCross(point + cellSize * V3F(0, 0, 0), 4_dm);
				//DebugDrawer::GetInstance().SetColor((weigths[1] > 1.f) ? insideColor : outsideColor);
				//DebugDrawer::GetInstance().DrawCross(point + cellSize * V3F(1, 0, 0), 4_dm);
				//DebugDrawer::GetInstance().SetColor((weigths[2] > 1.f) ? insideColor : outsideColor);
				//DebugDrawer::GetInstance().DrawCross(point + cellSize * V3F(0, 0, 1), 4_dm);
				//DebugDrawer::GetInstance().SetColor((weigths[3] > 1.f) ? insideColor : outsideColor);
				//DebugDrawer::GetInstance().DrawCross(point + cellSize * V3F(1, 0, 1), 4_dm);
				//DebugDrawer::GetInstance().SetColor((weigths[4] > 1.f) ? insideColor : outsideColor);
				//DebugDrawer::GetInstance().DrawCross(point + cellSize * V3F(0, 1, 0), 4_dm);
				//DebugDrawer::GetInstance().SetColor((weigths[5] > 1.f) ? insideColor : outsideColor);
				//DebugDrawer::GetInstance().DrawCross(point + cellSize * V3F(1, 1, 0), 4_dm);
				//DebugDrawer::GetInstance().SetColor((weigths[6] > 1.f) ? insideColor : outsideColor);
				//DebugDrawer::GetInstance().DrawCross(point + cellSize * V3F(0, 1, 1), 4_dm);
				//DebugDrawer::GetInstance().SetColor((weigths[7] > 1.f) ? insideColor : outsideColor);
				//DebugDrawer::GetInstance().DrawCross(point + cellSize * V3F(1, 1, 1), 4_dm);

				//std::string copyable = "{";
				for (int i = 0; i < marching_cubes_lut::triCountMapping[index]; i++)
				{
					marching_cubes_lut::Tri& tri = marching_cubes_lut::triTable[index][i];

					//WindowControl::Window("Marching Cubes", [this, &i, &tri]()
					//{
					//	ImGui::PushID(i);
					//	ImGui::Checkbox("", myDrawTris + i);
					//	ImGui::InputInt("A", &tri.myIndex1);
					//	ImGui::InputInt("B", &tri.myIndex2);
					//	ImGui::InputInt("C", &tri.myIndex3);
					//
					//	ImGui::PopID();
					//});
					//copyable += "{" + std::to_string(tri.myIndex1) + ", " + std::to_string(tri.myIndex2) + ", " + std::to_string(tri.myIndex3) + "}, ";

					if (!myDrawTris[i]) { continue; }

					V3F a = points[tri.myIndex1];
					V3F b = points[tri.myIndex2];
					V3F c = points[tri.myIndex3];
					//V3F ab = a - b;
					//V3F ac = a - c;
					//V3F normal = (ab.Cross(ac)).GetNormalized();

					DebugDrawer::GetInstance().DrawLine(a, b);
					DebugDrawer::GetInstance().DrawLine(b, c);
					DebugDrawer::GetInstance().DrawLine(c, a);

					//DebugDrawer::GetInstance().SetColor(outsideColor);
					//DebugDrawer::GetInstance().DrawLine(a + normal * 5_cm, b + normal * 5_cm);
					//DebugDrawer::GetInstance().DrawLine(b + normal * 5_cm, c + normal * 5_cm);
					//DebugDrawer::GetInstance().DrawLine(c + normal * 5_cm, a + normal * 5_cm);
					//
					//DebugDrawer::GetInstance().SetColor(insideColor);
					//DebugDrawer::GetInstance().DrawLine(a - normal * 5_cm, b - normal * 5_cm);
					//DebugDrawer::GetInstance().DrawLine(b - normal * 5_cm, c - normal * 5_cm);
					//DebugDrawer::GetInstance().DrawLine(c - normal * 5_cm, a - normal * 5_cm);
				}
				//if (x == 0 || y == 0 || z == 0)
				//{
				//	DebugDrawer::GetInstance().DrawLine(point, point + V3F(cellSize.x, 0, 0));
				//	DebugDrawer::GetInstance().DrawLine(point, point + V3F(0, 0, cellSize.z));
				//	DebugDrawer::GetInstance().DrawLine(point + cellSize, point + V3F(cellSize.x, 0, 0));
				//	DebugDrawer::GetInstance().DrawLine(point + cellSize, point + V3F(0, 0, cellSize.z));
				//}
				
				//WindowControl::Window("Marching Cubes", [&copyable]()
				//{
				//	char buffer[256];
				//	memcpy(buffer, copyable.c_str(), copyable.length() + 1);
				//	ImGui::InputText("blerughb", buffer, 256);
				//});
			}
		}
	}
}

void MarchingCubes::SetupGraphicsResources()
{
	//const size_t MaxTriCount = 2 * (myResolution - 1) * (myResolution - 1);
	//
	//ID3D11Device* device = myFamework->GetDevice();
	//
	//ID3D11Buffer* vertexBuffer;
	//ID3D11Buffer* indexBuffer;
	//ID3D11InputLayout* inputLayout;
	//
	//{
	//	CD3D11_BUFFER_DESC vertexBufferDescription;
	//	WIPE(vertexBufferDescription);
	//	vertexBufferDescription.ByteWidth = static_cast<UINT>(sizeof(Vertex) * MaxTriCount * 3);
	//	vertexBufferDescription.Usage = D3D11_USAGE_DYNAMIC;
	//	vertexBufferDescription.BindFlags = D3D11_BIND_VERTEX_BUFFER;
	//	vertexBufferDescription.CPUAccessFlags = D3D11_CPU_ACCESS_WRITE;
	//
	//
	//	std::vector<Vertex> initialVertex;
	//	initialVertex.resize(MaxTriCount * 3);
	//	initialVertex[0] = { V4F(-mySize / 2, myHeight, -mySize / 2, 1), V4F(0,1,0,0), V4F(1,0,0,0), V4F(0,0,1,0), CommonUtilities::Vector2<float>(0,0) };
	//	initialVertex[1] = { V4F(-mySize / 2, myHeight, +mySize / 2, 1), V4F(0,1,0,0), V4F(1,0,0,0), V4F(0,0,1,0), CommonUtilities::Vector2<float>(0,1) };
	//	initialVertex[2] = { V4F(+mySize / 2, myHeight, -mySize / 2, 1), V4F(0,1,0,0), V4F(1,0,0,0), V4F(0,0,1,0), CommonUtilities::Vector2<float>(1,0) };
	//	initialVertex[3] = { V4F(+mySize / 2, myHeight, +mySize / 2, 1), V4F(0,1,0,0), V4F(1,0,0,0), V4F(0,0,1,0), CommonUtilities::Vector2<float>(1,1) };
	//
	//	D3D11_SUBRESOURCE_DATA initialData;
	//	WIPE(initialData);
	//	initialData.pSysMem = initialVertex.data();
	//	initialData.SysMemPitch = sizeof(Vertex);
	//	initialData.SysMemSlicePitch = sizeof(Vertex);
	//
	//	HRESULT result = device->CreateBuffer(&vertexBufferDescription, &initialData, &vertexBuffer);
	//	if (FAILED(result))
	//	{
	//		SYSERROR("Couldn not create vertex buffer", "MarchingCubes");
	//		return;
	//	}
	//}
	//
	//Tools::ExecuteOnDestruct releaseVertexBuffer = Tools::ExecuteOnDestruct([vertexBuffer]() { vertexBuffer->Release(); });
	//
	//{
	//
	//	CD3D11_BUFFER_DESC indexBufferDescription;
	//	WIPE(indexBufferDescription);
	//	indexBufferDescription.ByteWidth = static_cast<UINT>(MaxTriCount * sizeof(Tri));
	//	indexBufferDescription.Usage = D3D11_USAGE_DYNAMIC;
	//	indexBufferDescription.BindFlags = D3D11_BIND_INDEX_BUFFER;
	//	indexBufferDescription.CPUAccessFlags = D3D11_CPU_ACCESS_WRITE;
	//
	//	std::vector<Tri> initialTris;
	//	initialTris.resize(MaxTriCount);
	//	initialTris[0] = { 0,1,2 };
	//	initialTris[1] = { 2,1,3 };
	//
	//	D3D11_SUBRESOURCE_DATA initialData;
	//	WIPE(initialData);
	//	initialData.pSysMem = initialTris.data();
	//	initialData.SysMemPitch = sizeof(Tri);
	//	initialData.SysMemSlicePitch = sizeof(Tri);
	//
	//	HRESULT result = device->CreateBuffer(&indexBufferDescription, &initialData, &indexBuffer);
	//	if (FAILED(result))
	//	{
	//		SYSERROR("Could not create index buffer", "MarchingCubes");
	//		return;
	//	}
	//}
	//
	//Tools::ExecuteOnDestruct releaseIndexBuffer = Tools::ExecuteOnDestruct([indexBuffer]() { indexBuffer->Release(); });
	//
	//{
	//	D3D11_INPUT_ELEMENT_DESC layout[ShaderTypes::MaxInputElementSize];
	//	UINT layoutElements = ShaderTypes::InputLayoutFromFlags(layout, ShaderFlags::HasUvSets);
	//
	//	HRESULT result = device->CreateInputLayout(layout, layoutElements, myModelData->myVertexShader.GetVertexShaderblob().data(), myModelData->myVertexShader.GetVertexShaderblob().size(), &inputLayout);
	//	if (FAILED(result))
	//	{
	//		SYSERROR("Could not create inputlayout", "MarchingCubes");
	//		return;
	//	}
	//}
	//
	//Tools::ExecuteOnDestruct releaseInputLayout = Tools::ExecuteOnDestruct([inputLayout]() { inputLayout->Release(); });
	//
	//myModelData->myVertexBuffer = vertexBuffer;
	//myModelData->myIndexBuffer = indexBuffer;
	//myModelData->myInputLayout = inputLayout;
	//myModelData->myNumberOfIndexes = 6;
	//myModelData->myUseForwardRenderer = true;
	//
	//releaseVertexBuffer.Disable();
	//releaseIndexBuffer.Disable();
	//releaseInputLayout.Disable();
}

#if USEIMGUI
void MarchingCubes::Imgui()
{
	WindowControl::Window("Marching Cubes", [this]()
	{
		ImGui::Checkbox("Do Movement", &myMove);
		ImGui::SameLine();
		if (ImGui::Button("AddOrb"))
		{
			AddRandomOrb();
		}
		ImGui::InputFloat("Speed", &mySpeed);
		ImGui::InputFloat("Threshold", &myTheshold);
		ImGui::Separator();

		for (int i = 0; i < myOrbs.size(); i++)
		{
			Orb& orb = myOrbs[i];

			ImGui::PushID(&orb);
			if (ImGui::TreeNode("Orb"))
			{
				ImGui::InputFloat("Size", &orb.mySize);
				ImGui::InputFloat3("Velocity", &orb.mySpeed.x);
				ImGui::InputFloat3("Position", &orb.myPosition.x);
				if (ImGui::Button("Remove"))
				{
					myOrbs.erase(myOrbs.begin() + i);
					ImGui::TreePop();
					ImGui::PopID();
					break;
				}
				ImGui::TreePop();
			}
			ImGui::PopID();
		}

		//ImGui::Separator();
		//static int index = 180;
		//
		//bool stepped = false;
		//ImGui::ProgressBar(index / 255.f);
		//if (ImGui::Button("Prev"))
		//{
		//	index--;
		//	if (index == 0)
		//	{
		//		index = 255;
		//	}
		//	stepped = true;
		//}
		//ImGui::SameLine();
		//if (ImGui::Button("Next"))
		//{
		//	index++;
		//	index %= 256;
		//	stepped = true;
		//}
		//ImGui::SameLine();
		//ImGui::Text("Config: %d", index);
		//
		//ImGui::Checkbox("##0", myDrawTris + 0);
		//ImGui::SameLine();
		//ImGui::Checkbox("##1", myDrawTris + 1);
		//ImGui::SameLine();
		//ImGui::Checkbox("##2", myDrawTris + 2);
		//ImGui::SameLine();
		//ImGui::Checkbox("##3", myDrawTris + 3);
		//ImGui::SameLine();
		//ImGui::Checkbox("##4", myDrawTris + 4);
		//
		//for (int i = 0; i < 12; i++)
		//{
		//	bool select = myHighlighted == i;
		//	ImGui::Selectable(std::to_string(i).c_str(), &select);
		//	if (select)
		//	{
		//		myHighlighted = i;
		//	}
		//}
		//
		//if (stepped)
		//{
		//	for (size_t i = 0; i < 8; i++)
		//	{
		//		myRawData[i] = (((index)&BIT(i)) != 0) ? 2.f : 0.f;
		//	}
		//}

		//for (int i = 0; i < myResolution * myResolution * myResolution; i++)
		//{
		//	ImGui::PushID(i);
		//
		//	ImGui::InputFloat(("vertex [" + std::to_string(i % myResolution) + "," + std::to_string((i / myResolution) % myResolution) + "," + std::to_string(i / (myResolution * myResolution)) + "]").c_str(), &myRawData[i]);
		//
		//	ImGui::PopID();
		//}
	});
}
#endif

void MarchingCubes::AddRandomOrb()
{
	myOrbs.emplace_back(Orb{
			CommonUtilities::Vector3<float>(Tools::RandomNormalized(),Tools::RandomNormalized(), Tools::RandomNormalized()),
			Tools::RandomDirection()* Tools::RandomNormalized(),
			Tools::RandomNormalized() * Tools::RandomNormalized() * 0.5f
		});
}

#endif